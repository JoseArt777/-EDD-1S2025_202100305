program EDDMail;

{$mode objfpc}{$H+}

uses
  {$IFDEF UNIX}
  cthreads,
  {$ENDIF}
  {$IFDEF HASAMIGA}
  athreads,
  {$ENDIF}
  Interfaces, // this includes the LCL widgetset
  Forms,
  SysUtils,
  EstructurasDatos,
  CorreoManager,
  InterfazGTK,
  Classes;

// =============== EJEMPLO ESPEC√çFICO PARA VALIDAR √ÅRBOL B ===============

procedure TestArbolB;
var
  Sistema: TEDDMailSystem;
  Usuario: PUsuario;
  Correo1, Correo2, Correo3, Correo4, Correo5, Correo6: PCorreo;
  Lista: TStringList;
  i: Integer;
begin
  WriteLn('========================================');
  WriteLn('INICIANDO TEST DEL √ÅRBOL B DE FAVORITOS');
  WriteLn('========================================');

  // 1. CREAR SISTEMA Y USUARIO
  Sistema := TEDDMailSystem.Create;
  try
    // Registrar usuario de prueba
    Sistema.RegistrarUsuario('Juan Perez', 'juan', 'juan@test.com', '12345678', 'pass123');
    Sistema.IniciarSesion('juan@test.com', 'pass123');
    Usuario := Sistema.GetUsuarioActual;

    WriteLn('‚úì Usuario creado: ', Usuario^.Nombre);
    WriteLn('‚úì √Årbol B inicial vac√≠o');

    // 2. CREAR CORREOS DE PRUEBA
    Correo1 := Sistema.CrearCorreo('ana@test.com', 'juan@test.com', 'Reuni√≥n', 'Reuni√≥n ma√±ana', '01/01/25 10:00');
    Correo1^.Id := 10;

    Correo2 := Sistema.CrearCorreo('luis@test.com', 'juan@test.com', 'Proyecto', 'Avances del proyecto', '02/01/25 11:00');
    Correo2^.Id := 5;

    Correo3 := Sistema.CrearCorreo('maria@test.com', 'juan@test.com', 'Viaje', 'Planes de viaje', '03/01/25 12:00');
    Correo3^.Id := 15;

    Correo4 := Sistema.CrearCorreo('carlos@test.com', 'juan@test.com', 'Cena', 'Invitaci√≥n a cena', '04/01/25 13:00');
    Correo4^.Id := 3;

    Correo5 := Sistema.CrearCorreo('sofia@test.com', 'juan@test.com', 'Curso', 'Curso de programaci√≥n', '05/01/25 14:00');
    Correo5^.Id := 12;

    Correo6 := Sistema.CrearCorreo('pedro@test.com', 'juan@test.com', 'Fiesta', 'Fiesta de cumplea√±os', '06/01/25 15:00');
    Correo6^.Id := 8;

    WriteLn('‚úì Correos creados con IDs: 10, 5, 15, 3, 12, 8');

    // 3. INSERTAR CORREOS EN EL √ÅRBOL B (EN ORDEN ESPEC√çFICO)
    WriteLn('');
    WriteLn('--- INSERTANDO EN √ÅRBOL B ---');

    // Insertar ID 10
    Usuario^.ArbolFavoritos := Sistema.InsertarB(Usuario^.ArbolFavoritos, Correo1);
    WriteLn('Insertado ID 10: Nodo ra√≠z = [10]');

    // Insertar ID 5
    Usuario^.ArbolFavoritos := Sistema.InsertarB(Usuario^.ArbolFavoritos, Correo2);
    WriteLn('Insertado ID 5:  Nodo ra√≠z = [5, 10]');

    // Insertar ID 15
    Usuario^.ArbolFavoritos := Sistema.InsertarB(Usuario^.ArbolFavoritos, Correo3);
    WriteLn('Insertado ID 15: Nodo ra√≠z = [5, 10, 15]');

    // Insertar ID 3
    Usuario^.ArbolFavoritos := Sistema.InsertarB(Usuario^.ArbolFavoritos, Correo4);
    WriteLn('Insertado ID 3:  Nodo ra√≠z = [3, 5, 10, 15]');

    // Insertar ID 12 (deber√≠a causar divisi√≥n)
    Usuario^.ArbolFavoritos := Sistema.InsertarB(Usuario^.ArbolFavoritos, Correo5);
    WriteLn('Insertado ID 12: ¬°DIVISI√ìN! Nueva estructura:');
    WriteLn('    Ra√≠z: [10]');
    WriteLn('    Hijo izq: [3, 5]    Hijo der: [12, 15]');

    // Insertar ID 8
    Usuario^.ArbolFavoritos := Sistema.InsertarB(Usuario^.ArbolFavoritos, Correo6);
    WriteLn('Insertado ID 8:');
    WriteLn('    Ra√≠z: [10]');
    WriteLn('    Hijo izq: [3, 5, 8]    Hijo der: [12, 15]');

    // 4. VALIDACIONES ESPEC√çFICAS
    WriteLn('');
    WriteLn('--- VALIDACIONES ---');

    // Validar estructura
    if Sistema.EsArbolBValido(Usuario^.ArbolFavoritos) then
      WriteLn('‚úì V√ÅLIDO: √Årbol B cumple todas las propiedades')
    else
      WriteLn('‚úó ERROR: √Årbol B NO es v√°lido');

    // Contar favoritos
    WriteLn('‚úì Total favoritos: ', Sistema.ContarFavoritos(Usuario));

    // Validar altura
    WriteLn('‚úì Altura del √°rbol: ', Sistema.ObtenerAlturaArbolB(Usuario^.ArbolFavoritos));

    // Validar n√∫mero de nodos
    WriteLn('‚úì N√∫mero de nodos: ', Sistema.ObtenerNumeroNodos(Usuario^.ArbolFavoritos));

    // 5. BUSCAR ELEMENTOS ESPEC√çFICOS
    WriteLn('');
    WriteLn('--- B√öSQUEDAS ---');

    // Buscar elementos que existen
    if Sistema.BuscarB(Usuario^.ArbolFavoritos, 5) <> nil then
      WriteLn('‚úì ENCONTRADO: ID 5 (', Sistema.BuscarB(Usuario^.ArbolFavoritos, 5)^.Asunto, ')')
    else
      WriteLn('‚úó ERROR: ID 5 no encontrado');

    if Sistema.BuscarB(Usuario^.ArbolFavoritos, 12) <> nil then
      WriteLn('‚úì ENCONTRADO: ID 12 (', Sistema.BuscarB(Usuario^.ArbolFavoritos, 12)^.Asunto, ')')
    else
      WriteLn('‚úó ERROR: ID 12 no encontrado');

    // Buscar elemento que NO existe
    if Sistema.BuscarB(Usuario^.ArbolFavoritos, 99) = nil then
      WriteLn('‚úì CORRECTO: ID 99 no existe (como se esperaba)')
    else
      WriteLn('‚úó ERROR: ID 99 encontrado cuando no deber√≠a existir');

    // 6. RECORRIDO IN-ORDEN (DEBE ESTAR ORDENADO)
    WriteLn('');
    WriteLn('--- RECORRIDO IN-ORDEN ---');
    Lista := TStringList.Create;
    try
      Sistema.RecorridoInOrdenB(Usuario^.ArbolFavoritos, Lista);
      WriteLn('Elementos en orden:');
      for i := 0 to Lista.Count - 1 do
        WriteLn('  ', Lista[i]);

      // Verificar que est√°n en orden
      WriteLn('');
      if Lista.Count = 6 then
        WriteLn('‚úì CORRECTO: Se encontraron los 6 elementos')
      else
        WriteLn('‚úó ERROR: Se esperaban 6 elementos, se encontraron ', Lista.Count);

    finally
      Lista.Free;
    end;

    // 7. ELIMINAR UN FAVORITO
    WriteLn('');
    WriteLn('--- ELIMINACI√ìN ---');
    if Sistema.EliminarFavorito(Usuario, 5) then
    begin
      WriteLn('‚úì ELIMINADO: ID 5 removido de favoritos');
      WriteLn('‚úì Total favoritos despu√©s: ', Sistema.ContarFavoritos(Usuario));

      // Verificar que ya no existe
      if Sistema.BuscarB(Usuario^.ArbolFavoritos, 5) = nil then
        WriteLn('‚úì VERIFICADO: ID 5 ya no se encuentra en el √°rbol')
      else
        WriteLn('‚úó ERROR: ID 5 a√∫n existe despu√©s de eliminarlo');
    end
    else
      WriteLn('‚úó ERROR: No se pudo eliminar ID 5');

    // 8. RESULTADO FINAL
    WriteLn('');
    WriteLn('========================================');
    if Sistema.EsArbolBValido(Usuario^.ArbolFavoritos) and
       (Sistema.ContarFavoritos(Usuario) = 5) then
    begin
      WriteLn('üéâ ¬°√âXITO! EL √ÅRBOL B FUNCIONA CORRECTAMENTE');
      WriteLn('   - Mantiene propiedades del √Årbol B');
      WriteLn('   - Inserciones funcionan');
      WriteLn('   - Divisiones autom√°ticas funcionan');
      WriteLn('   - B√∫squedas funcionan');
      WriteLn('   - Eliminaciones funcionan');
      WriteLn('   - Recorridos funcionan');
    end
    else
    begin
      WriteLn('‚ùå HAY ERRORES EN LA IMPLEMENTACI√ìN');
      WriteLn('   Revisa los mensajes de error anteriores');
    end;
    WriteLn('========================================');

  finally
    Sistema.Free;
  end;
end;

// =============== C√ìMO USAR ESTE TEST ===============
// 1. Agrega este procedimiento al final de tu estructurasdatos.pas
// 2. En tu programa principal, llama: TestArbolB;
// 3. Observa la salida en consola para ver si todo funciona

// =============== SALIDA ESPERADA SI TODO EST√Å BIEN ===============
(*
========================================
INICIANDO TEST DEL √ÅRBOL B DE FAVORITOS
========================================
‚úì Usuario creado: Juan Perez
‚úì √Årbol B inicial vac√≠o
‚úì Correos creados con IDs: 10, 5, 15, 3, 12, 8

--- INSERTANDO EN √ÅRBOL B ---
Insertado ID 10: Nodo ra√≠z = [10]
Insertado ID 5:  Nodo ra√≠z = [5, 10]
Insertado ID 15: Nodo ra√≠z = [5, 10, 15]
Insertado ID 3:  Nodo ra√≠z = [3, 5, 10, 15]
Insertado ID 12: ¬°DIVISI√ìN! Nueva estructura:
    Ra√≠z: [10]
    Hijo izq: [3, 5]    Hijo der: [12, 15]
Insertado ID 8:
    Ra√≠z: [10]
    Hijo izq: [3, 5, 8]    Hijo der: [12, 15]

--- VALIDACIONES ---
‚úì V√ÅLIDO: √Årbol B cumple todas las propiedades
‚úì Total favoritos: 6
‚úì Altura del √°rbol: 2
‚úì N√∫mero de nodos: 3

--- B√öSQUEDAS ---
‚úì ENCONTRADO: ID 5 (Proyecto)
‚úì ENCONTRADO: ID 12 (Curso)
‚úì CORRECTO: ID 99 no existe (como se esperaba)

--- RECORRIDO IN-ORDEN ---
Elementos en orden:
  ID: 3 - carlos@test.com ‚Üí juan@test.com: Cena
  ID: 5 - luis@test.com ‚Üí juan@test.com: Proyecto
  ID: 8 - pedro@test.com ‚Üí juan@test.com: Fiesta
  ID: 10 - ana@test.com ‚Üí juan@test.com: Reuni√≥n
  ID: 12 - sofia@test.com ‚Üí juan@test.com: Curso
  ID: 15 - maria@test.com ‚Üí juan@test.com: Viaje

‚úì CORRECTO: Se encontraron los 6 elementos

--- ELIMINACI√ìN ---
‚úì ELIMINADO: ID 5 removido de favoritos
‚úì Total favoritos despu√©s: 5
‚úì VERIFICADO: ID 5 ya no se encuentra en el √°rbol

========================================
üéâ ¬°√âXITO! EL √ÅRBOL B FUNCIONA CORRECTAMENTE
   - Mantiene propiedades del √Årbol B
   - Inserciones funcionan
   - Divisiones autom√°ticas funcionan
   - B√∫squedas funcionan
   - Eliminaciones funcionan
   - Recorridos funcionan
========================================
*)

var
  Aplicacion: TInterfazEDDMail;

begin


  // Configurar aplicaci√≥n
  RequireDerivedFormResource := True;
  Application.Scaled := True;
  Application.Initialize;

  WriteLn('=================================');
  WriteLn('    EDDMail - Sistema de Correo');
  WriteLn('    Estructuras de Datos - USAC');
  WriteLn('=================================');
  WriteLn('Iniciando aplicaci√≥n con Lazarus...');
  WriteLn('');
  WriteLn('Credenciales por defecto:');
  WriteLn('Email: root@edd.com');
  WriteLn('Password: root123');
  WriteLn('');

  try
    // Crear directorio de reportes
    if not DirectoryExists('Root-Reportes') then
      CreateDir('Root-Reportes');

       // ========== AGREGAR ESTA L√çNEA AQU√ç ==========
    TestArbolB;  // ‚Üê Test del √Årbol B
    WriteLn('Presiona Enter para continuar a la interfaz...');
    ReadLn;
    // ============================================


    Aplicacion := TInterfazEDDMail.Create;
    try
      WriteLn('Sistema inicializado correctamente.');
      WriteLn('Mostrando interfaz gr√°fica...');
      WriteLn('');

      // Ejecutar aplicaci√≥n
      Aplicacion.Ejecutar;

    finally
      Aplicacion.Free;
    end;
  except
    on E: Exception do
    begin
      WriteLn('Error al ejecutar la aplicaci√≥n: ', E.Message);
      WriteLn('Presione Enter para continuar...');
      ReadLn;
      Halt(1);
    end;
  end;

  WriteLn('Aplicaci√≥n terminada correctamente.');
end.
