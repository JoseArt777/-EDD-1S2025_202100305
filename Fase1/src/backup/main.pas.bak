program EDDMail;

{$mode objfpc}{$H+}

uses
  gtk2, glib2, Classes, SysUtils,
  UStructures, UUser,
  login_interface, root_interface, user_interface;

type
  // Clases auxiliares simplificadas para compilar
  TLoginSession = class
  private
    FUserManager: TUserManager;
    FCurrentUser: PUser;
    FIsRootUser: Boolean;
  public
    constructor Create(UserManager: TUserManager);
    function Login(email, password: string): Boolean;
    procedure Logout;
    function IsRootUser: Boolean;
    property CurrentUser: PUser read FCurrentUser;
  end;

  TRootManager = class
  private
    FUserManager: TUserManager;
  public
    constructor Create(UserManager: TUserManager);
    function LoadUsersFromJSON(filename: string; var errorMsg: string): Boolean;
    function GenerateUserReport: Boolean;
    function GenerateRelationReport: Boolean;
  end;

  TMainApplication = class
  private
    FUserManager: TUserManager;
    FLoginSession: TLoginSession;
    FRootManager: TRootManager;

    FLoginInterface: TLoginInterface;
    FRootInterface: TRootInterface;
    FUserInterface: TUserInterface;

    procedure OnLoginSuccess(Sender: TObject);
    procedure OnLogout(Sender: TObject);

  public
    constructor Create;
    destructor Destroy; override;

    procedure Initialize;
    procedure Run;
  end;

var
  Application: TMainApplication;

// TLoginSession Implementation
constructor TLoginSession.Create(UserManager: TUserManager);
begin
  inherited Create;
  FUserManager := UserManager;
  FCurrentUser := nil;
  FIsRootUser := False;
end;

function TLoginSession.Login(email, password: string): Boolean;
begin
  Result := FUserManager.LoginUser(email, password);
  if Result then
  begin
    FCurrentUser := FUserManager.GetCurrentUser;
    FIsRootUser := (email = 'root@edd.com');
  end;
end;

procedure TLoginSession.Logout;
begin
  FUserManager.LogoutUser;
  FCurrentUser := nil;
  FIsRootUser := False;
end;

function TLoginSession.IsRootUser: Boolean;
begin
  Result := FIsRootUser;
end;

// TRootManager Implementation
constructor TRootManager.Create(UserManager: TUserManager);
begin
  inherited Create;
  FUserManager := UserManager;
end;

function TRootManager.LoadUsersFromJSON(filename: string; var errorMsg: string): Boolean;
begin
  Result := True;
  errorMsg := '';
  try
    FUserManager.LoadUsersFromJSON(filename);
  except
    on E: Exception do
    begin
      Result := False;
      errorMsg := E.Message;
    end;
  end;
end;

function TRootManager.GenerateUserReport: Boolean;
begin
  Result := True;
  WriteLn('Generando reporte de usuarios...');
  // TODO: Implementar generación de reportes
end;

function TRootManager.GenerateRelationReport: Boolean;
begin
  Result := True;
  WriteLn('Generando reporte de relaciones...');
  // TODO: Implementar generación de reportes
end;

// TMainApplication Implementation
constructor TMainApplication.Create;
begin
  inherited Create;

  // Inicializar GTK
  gtk_init(@argc, @argv);

  // Crear managers
  FUserManager := TUserManager.Create;
  FLoginSession := TLoginSession.Create(FUserManager);
  FRootManager := TRootManager.Create(FUserManager);

  // Crear interfaces
  FLoginInterface := TLoginInterface.Create(FLoginSession);
  FRootInterface := TRootInterface.Create(FRootManager, FLoginSession);
  FUserInterface := TUserInterface.Create(FUserManager);  // Corregido: solo requiere TUserManager

  // Configurar eventos
  FLoginInterface.OnLoginSuccess := @OnLoginSuccess;
  FRootInterface.OnLogout := @OnLogout;
  // Nota: TUserInterface no tiene OnLogout en el código actual
end;

destructor TMainApplication.Destroy;
begin
  FUserInterface.Free;
  FRootInterface.Free;
  FLoginInterface.Free;
  FRootManager.Free;
  FLoginSession.Free;
  FUserManager.Free;
  inherited Destroy;
end;

procedure TMainApplication.Initialize;
var
  errorMsg: string;
begin
  // Cargar datos iniciales si existe el archivo
  if FileExists('data/usuarios.json') then
  begin
    FRootManager.LoadUsersFromJSON('data/usuarios.json', errorMsg);
    if errorMsg <> '' then
      WriteLn('Warning: ', errorMsg);
  end;

  // Mostrar ventana de login
  FLoginInterface.Show;
end;

procedure TMainApplication.OnLoginSuccess(Sender: TObject);
begin
  FLoginInterface.Hide;

  if FLoginSession.IsRootUser then
  begin
    FRootInterface.Show;
  end
  else
  begin
    FUserInterface.SetCurrentUser(FLoginSession.CurrentUser);
    FUserInterface.Initialize;
    FUserInterface.Show;
  end;
end;

procedure TMainApplication.OnLogout(Sender: TObject);
begin
  if FRootInterface <> nil then
    FRootInterface.Hide;
  if FUserInterface <> nil then
    FUserInterface.Hide;

  FLoginSession.Logout;
  FLoginInterface.Show;
end;

procedure TMainApplication.Run;
begin
  gtk_main;
end;

// Programa principal
begin
  try
    Application := TMainApplication.Create;
    try
      Application.Initialize;
      Application.Run;
    finally
      Application.Free;
    end;
  except
    on E: Exception do
    begin
      WriteLn('Error: ', E.Message);
      Halt(1);
    end;
  end;
end.
