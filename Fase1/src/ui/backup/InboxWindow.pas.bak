unit InboxWindow;

{$mode objfpc}{$H+}

interface

uses
  GTK2, GDK2, GLib2, SysUtils, Classes, DataStructures, SystemCore, UIBase, EmailManager;

type
  TInboxWindow = class(TBaseWindow)
  private
    FMainVBox: PGtkWidget;
    FButtonsHBox: PGtkWidget;
    FEmailList: PGtkWidget;
    FScrolledWindow: PGtkWidget;
    FSortButton: PGtkWidget;
    FRefreshButton: PGtkWidget;
    FDeleteButton: PGtkWidget;
    FMarkReadButton: PGtkWidget;
    FStatusLabel: PGtkWidget;

    // Ventana de detalles del email
    FDetailWindow: PGtkWidget;
    FDetailTextView: PGtkWidget;
    FSelectedEmail: PEmail;

    procedure CreateEmailList;
    procedure CreateDetailWindow;
    procedure ShowEmailDetails(Email: PEmail);
    procedure UpdateStatusLabel;

  protected
    procedure SetupComponents; override;
    procedure ConnectSignals; override;

  public
    constructor Create(AParent: PGtkWidget = nil);
    destructor Destroy; override;
    procedure RefreshInbox;
    procedure SortEmails;
    procedure DeleteSelectedEmail;
    procedure MarkSelectedAsRead;
  end;

// Callbacks
procedure OnEmailRowActivated(widget: PGtkWidget; path: PGtkTreePath;
                             column: PGtkTreeViewColumn; data: gpointer); cdecl;
procedure OnSortClicked(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnRefreshClicked(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnDeleteClicked(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnMarkReadClicked(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnDetailWindowDestroy(widget: PGtkWidget; data: gpointer); cdecl;

implementation

constructor TInboxWindow.Create(AParent: PGtkWidget);
begin
  inherited Create('Bandeja de Entrada', 700, 500, AParent);
  FSelectedEmail := nil;
  RefreshInbox;
end;

destructor TInboxWindow.Destroy;
begin
  if FDetailWindow <> nil then
    gtk_widget_destroy(FDetailWindow);
  inherited;
end;

procedure TInboxWindow.SetupComponents;
begin
  // Contenedor principal
  FMainVBox := TUIUtils.CreateVBox(10);
  gtk_container_add(GTK_CONTAINER(FWindow), FMainVBox);
  gtk_container_set_border_width(GTK_CONTAINER(FMainVBox), 10);

  // Botones de acci√≥n
  FButtonsHBox := TUIUtils.CreateHBox(10);
  gtk_box_pack_start(GTK_BOX(FMainVBox), FButtonsHBox, False, False, 5);

  FSortButton := TUIUtils.CreateButton('üìã Ordenar por Asunto', @OnSortClicked, Self);
  FRefreshButton := TUIUtils.CreateButton('üîÑ Actualizar', @OnRefreshClicked, Self);
  FDeleteButton := TUIUtils.CreateButton('üóëÔ∏è Eliminar', @OnDeleteClicked, Self);
  FMarkReadButton := TUIUtils.CreateButton('‚úÖ Marcar como Le√≠do', @OnMarkReadClicked, Self);

  gtk_box_pack_start(GTK_BOX(FButtonsHBox), FSortButton, False, False, 5);
  gtk_box_pack_start(GTK_BOX(FButtonsHBox), FRefreshButton, False, False, 5);
  gtk_box_pack_start(GTK_BOX(FButtonsHBox), FDeleteButton, False, False, 5);
  gtk_box_pack_start(GTK_BOX(FButtonsHBox), FMarkReadButton, False, False, 5);

  // Lista de emails
  CreateEmailList;

  // Label de estado
  FStatusLabel := TUIUtils.CreateLabel('');
  gtk_box_pack_start(GTK_BOX(FMainVBox), FStatusLabel, False, False, 5);

  UpdateStatusLabel;
end;

procedure TInboxWindow.CreateEmailList;
var
  ListStore: PGtkListStore;
  Renderer: PGtkCellRenderer;
  Column: PGtkTreeViewColumn;
begin
  // Crear scrolled window
  FScrolledWindow := TUIUtils.CreateScrolledWindow;
  gtk_box_pack_start(GTK_BOX(FMainVBox), FScrolledWindow, True, True, 5);

  // Crear list store con columnas: Estado, Asunto, Remitente, Fecha, ID
  ListStore := gtk_list_store_new(5, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_INT);

  // Crear tree view
  FEmailList := gtk_tree_view_new_with_model(GTK_TREE_MODEL(ListStore));
  gtk_container_add(GTK_CONTAINER(FScrolledWindow), FEmailList);

  // Columna Estado
  Renderer := gtk_cell_renderer_text_new;
  Column := gtk_tree_view_column_new_with_attributes('Estado', Renderer, 'text', 0, nil);
  gtk_tree_view_column_set_resizable(Column, True);
  gtk_tree_view_column_set_min_width(Column, 80);
  gtk_tree_view_append_column(GTK_TREE_VIEW(FEmailList), Column);

  // Columna Asunto
  Renderer := gtk_cell_renderer_text_new;
  Column := gtk_tree_view_column_new_with_attributes('Asunto', Renderer, 'text', 1, nil);
  gtk_tree_view_column_set_resizable(Column, True);
  gtk_tree_view_column_set_min_width(Column, 200);
  gtk_tree_view_append_column(GTK_TREE_VIEW(FEmailList), Column);

  // Columna Remitente
  Renderer := gtk_cell_renderer_text_new;
  Column := gtk_tree_view_column_new_with_attributes('Remitente', Renderer, 'text', 2, nil);
  gtk_tree_view_column_set_resizable(Column, True);
  gtk_tree_view_column_set_min_width(Column, 150);
  gtk_tree_view_append_column(GTK_TREE_VIEW(FEmailList), Column);

  // Columna Fecha
  Renderer := gtk_cell_renderer_text_new;
  Column := gtk_tree_view_column_new_with_attributes('Fecha', Renderer, 'text', 3, nil);
  gtk_tree_view_column_set_resizable(Column, True);
  gtk_tree_view_column_set_min_width(Column, 120);
  gtk_tree_view_append_column(GTK_TREE_VIEW(FEmailList), Column);

  g_object_unref(ListStore);
end;

procedure TInboxWindow.ConnectSignals;
begin
  inherited;
  g_signal_connect(G_OBJECT(FEmailList), 'row-activated', G_CALLBACK(@OnEmailRowActivated), Self);
end;

procedure TInboxWindow.RefreshInbox;
var
  UserInbox: TEmailList;
  Current: PEmail;
  ListStore: PGtkListStore;
  Iter: TGtkTreeIter;
  EstadoText, FechaText: String;
begin
  if not IsUserLoggedIn then Exit;

  UserInbox := GetUserInbox(CurrentUser^.Email);
  ListStore := GTK_LIST_STORE(gtk_tree_view_get_model(GTK_TREE_VIEW(FEmailList)));

  // Limpiar lista
  gtk_list_store_clear(ListStore);

  // Agregar emails a la lista
  Current := UserInbox.GetFirst;
  while Current <> nil do
  begin
    if Current^.Estado = 'NL' then
      EstadoText := 'üìß No Le√≠do'
    else
      EstadoText := '‚úÖ Le√≠do';

    FechaText := FormatDateTime('dd/mm/yyyy hh:nn', Current^.Fecha);

    gtk_list_store_append(ListStore, @Iter);
    gtk_list_store_set(ListStore, @Iter,
                      0, PChar(EstadoText),
                      1, PChar(Current^.Asunto),
                      2, PChar(Current^.Remitente),
                      3, PChar(FechaText),
                      4, Current^.Id,
                      -1);

    Current := Current^.Next;
  end;

  UpdateStatusLabel;
end;

procedure TInboxWindow.SortEmails;
var
  Emails: TEmailList;
begin
  if CurrentUser = nil then Exit;

  Emails := GetUserEmailsReceived(CurrentUser^.Email);
  if Emails = nil then
  begin
    // CORREGIDO: Usar funci√≥n segura en lugar de TUIUtils.ShowErrorMessage
    TUIUtils.ShowSafeErrorMessage(FWindow, 'No se pudieron obtener los emails');
    Exit;
  end;

  try
    Emails.SortBySubject;

    // CORREGIDO: Usar funci√≥n segura en lugar de TUIUtils.ShowInfoMessage
    TUIUtils.ShowSafeInfoMessage(FWindow, 'Correos ordenados por asunto alfab√©ticamente');

    // Recargar la lista de emails
    LoadEmails;
  except
    on E: Exception do
    begin
      // CORREGIDO: Usar funci√≥n segura y manejar excepci√≥n
      TUIUtils.ShowSafeErrorMessage(FWindow, 'Error al ordenar emails: ' + E.Message);
    end;
  end;
end;

procedure TInboxWindow.DeleteSelectedEmail;
var
  Selection: PGtkTreeSelection;
  ListStore: PGtkListStore;
  Iter: TGtkTreeIter;
  EmailId: Integer;
  Path: PGtkTreePath;
begin
  Selection := gtk_tree_view_get_selection(GTK_TREE_VIEW(FEmailList));
  ListStore := GTK_LIST_STORE(gtk_tree_view_get_model(GTK_TREE_VIEW(FEmailList)));

  if gtk_tree_selection_get_selected(Selection, nil, @Iter) then
  begin
    gtk_tree_model_get(GTK_TREE_MODEL(ListStore), @Iter, 4, @EmailId, -1);

    if TUIUtils.ShowConfirmDialog(FWindow, 'Eliminar Email',
                                 '¬øEst√° seguro que desea eliminar este email?') then
    begin
      if DeleteEmail(EmailId) then
      begin
        RefreshInbox;
        TUIUtils.ShowInfoMessage(FWindow, 'Email movido a la papelera');
      end
      else
      begin
        TUIUtils.ShowErrorMessage(FWindow, 'Error al eliminar el email');
      end;
    end;
  end
  else
  begin
    TUIUtils.ShowErrorMessage(FWindow, 'Por favor seleccione un email para eliminar');
  end;
end;

procedure TInboxWindow.MarkSelectedAsRead;
var
  Selection: PGtkTreeSelection;
  ListStore: PGtkListStore;
  Iter: TGtkTreeIter;
  EmailId: Integer;
begin
  Selection := gtk_tree_view_get_selection(GTK_TREE_VIEW(FEmailList));
  ListStore := GTK_LIST_STORE(gtk_tree_view_get_model(GTK_TREE_VIEW(FEmailList)));

  if gtk_tree_selection_get_selected(Selection, nil, @Iter) then
  begin
    gtk_tree_model_get(GTK_TREE_MODEL(ListStore), @Iter, 4, @EmailId, -1);

    if MarkEmailAsRead(EmailId) then
    begin
      RefreshInbox;
      TUIUtils.ShowInfoMessage(FWindow, 'Email marcado como le√≠do');
    end
    else
    begin
      TUIUtils.ShowErrorMessage(FWindow, 'Error al marcar email como le√≠do');
    end;
  end
  else
  begin
    TUIUtils.ShowErrorMessage(FWindow, 'Por favor seleccione un email para marcar como le√≠do');
  end;
end;

procedure TInboxWindow.UpdateStatusLabel;
var
  UserInbox: TEmailList;
  TotalCount, UnreadCount: Integer;
  StatusText: String;
begin
  if not IsUserLoggedIn then Exit;

  UserInbox := GetUserInbox(CurrentUser^.Email);
  TotalCount := UserInbox.GetCount;
  UnreadCount := UserInbox.GetUnreadCount;

  StatusText := 'Total: ' + IntToStr(TotalCount) + ' correos | No le√≠dos: ' + IntToStr(UnreadCount);
  gtk_label_set_text(GTK_LABEL(FStatusLabel), PChar(StatusText));
end;

procedure TInboxWindow.ShowEmailDetails(Email: PEmail);
var
  MainVBox, ButtonsHBox: PGtkWidget;
  ScrolledWin: PGtkWidget;
  CloseButton: PGtkWidget;
  Buffer: PGtkTextBuffer;
  DetailText: String;
begin
  if FDetailWindow <> nil then
    gtk_widget_destroy(FDetailWindow);

  // Crear ventana de detalles
  FDetailWindow := gtk_window_new(GTK_WINDOW_TOPLEVEL);
  gtk_window_set_title(GTK_WINDOW(FDetailWindow), PChar('Detalles del Email - ' + Email^.Asunto));
  gtk_window_set_default_size(GTK_WINDOW(FDetailWindow), 600, 400);
  gtk_window_set_position(GTK_WINDOW(FDetailWindow), GTK_WIN_POS_CENTER_ON_PARENT);
  gtk_window_set_transient_for(GTK_WINDOW(FDetailWindow), GTK_WINDOW(FWindow));
  gtk_window_set_modal(GTK_WINDOW(FDetailWindow), True);

  MainVBox := TUIUtils.CreateVBox(10);
  gtk_container_add(GTK_CONTAINER(FDetailWindow), MainVBox);
  gtk_container_set_border_width(GTK_CONTAINER(MainVBox), 10);

  // Text view para mostrar detalles
  ScrolledWin := TUIUtils.CreateScrolledWindow;
  gtk_box_pack_start(GTK_BOX(MainVBox), ScrolledWin, True, True, 5);

  FDetailTextView := TUIUtils.CreateTextView;
  gtk_text_view_set_editable(GTK_TEXT_VIEW(FDetailTextView), False);
  gtk_container_add(GTK_CONTAINER(ScrolledWin), FDetailTextView);

  // Formatear texto con detalles del email
  DetailText := 'De: ' + Email^.Remitente + LineEnding +
                'Asunto: ' + Email^.Asunto + LineEnding +
                'Fecha: ' + FormatDateTime('dd/mm/yyyy hh:nn:ss', Email^.Fecha) + LineEnding +
                'Estado: ';
  if Email^.Estado = 'NL' then
    DetailText := DetailText + 'No Le√≠do'
  else
    DetailText := DetailText + 'Le√≠do';

  DetailText := DetailText + LineEnding + LineEnding +
                '--- Mensaje ---' + LineEnding +
                Email^.Mensaje;

  Buffer := gtk_text_view_get_buffer(GTK_TEXT_VIEW(FDetailTextView));
  gtk_text_buffer_set_text(Buffer, PChar(DetailText), -1);

  // Botones
  ButtonsHBox := TUIUtils.CreateHBox(10);
  gtk_box_pack_start(GTK_BOX(MainVBox), ButtonsHBox, False, False, 5);

  CloseButton := TUIUtils.CreateButton('Cerrar', nil);
  g_signal_connect(G_OBJECT(CloseButton), 'clicked', G_CALLBACK(@OnDetailWindowDestroy), Self);
  gtk_box_pack_end(GTK_BOX(ButtonsHBox), CloseButton, False, False, 5);

  g_signal_connect(G_OBJECT(FDetailWindow), 'destroy', G_CALLBACK(@OnDetailWindowDestroy), Self);

  gtk_widget_show_all(FDetailWindow);

  // Marcar como le√≠do autom√°ticamente al abrir
  if Email^.Estado = 'NL' then
  begin
    MarkEmailAsRead(Email^.Id);
    RefreshInbox;
  end;
end;

procedure TInboxWindow.CreateDetailWindow;
begin
  // Esta funci√≥n se mantiene por compatibilidad, pero la l√≥gica est√° en ShowEmailDetails
end;

// ============================================================================
// Callbacks
// ============================================================================

procedure OnEmailRowActivated(widget: PGtkWidget; path: PGtkTreePath;
                             column: PGtkTreeViewColumn; data: gpointer); cdecl;
var
  InboxWindow: TInboxWindow;
  ListStore: PGtkListStore;
  Iter: TGtkTreeIter;
  EmailId: Integer;
  UserInbox: TEmailList;
  Email: PEmail;
begin
  InboxWindow := TInboxWindow(data);
  ListStore := GTK_LIST_STORE(gtk_tree_view_get_model(GTK_TREE_VIEW(widget)));

  if gtk_tree_model_get_iter(GTK_TREE_MODEL(ListStore), @Iter, path) then
  begin
    gtk_tree_model_get(GTK_TREE_MODEL(ListStore), @Iter, 4, @EmailId, -1);

    UserInbox := GetUserInbox(CurrentUser^.Email);
    Email := UserInbox.Find(EmailId);

    if Email <> nil then
    begin
      InboxWindow.FSelectedEmail := Email;
      InboxWindow.ShowEmailDetails(Email);
    end;
  end;
end;

procedure OnSortClicked(widget: PGtkWidget; data: gpointer); cdecl;
var
  InboxWindow: TInboxWindow;
begin
  InboxWindow := TInboxWindow(data);
  InboxWindow.SortEmails;
end;

procedure OnRefreshClicked(widget: PGtkWidget; data: gpointer); cdecl;
var
  InboxWindow: TInboxWindow;
begin
  InboxWindow := TInboxWindow(data);
  InboxWindow.RefreshInbox;
end;

procedure OnDeleteClicked(widget: PGtkWidget; data: gpointer); cdecl;
var
  InboxWindow: TInboxWindow;
begin
  InboxWindow := TInboxWindow(data);
  InboxWindow.DeleteSelectedEmail;
end;

procedure OnMarkReadClicked(widget: PGtkWidget; data: gpointer); cdecl;
var
  InboxWindow: TInboxWindow;
begin
  InboxWindow := TInboxWindow(data);
  InboxWindow.MarkSelectedAsRead;
end;

procedure OnDetailWindowDestroy(widget: PGtkWidget; data: gpointer); cdecl;
var
  InboxWindow: TInboxWindow;
begin
  InboxWindow := TInboxWindow(data);
  InboxWindow.FDetailWindow := nil;
end;

end.

