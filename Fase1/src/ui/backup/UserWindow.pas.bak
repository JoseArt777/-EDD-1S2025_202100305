unit LoginWindow;

{$mode objfpc}{$H+}

interface

uses
  GTK2, GDK2, GLib2, SysUtils, Classes, DataStructures, SystemCore, UserManager,
  RootWindow, UserWindow, BasicOperations;

type
  TLoginWindow = class
  private
    FWindow: PGtkWidget;
    FEmailEntry: PGtkWidget;
    FPasswordEntry: PGtkWidget;
    FLoginButton: PGtkWidget;
    FCreateAccountButton: PGtkWidget;
    FStatusLabel: PGtkWidget;

    // Ventana de registro
    FRegisterWindow: PGtkWidget;
    FRegNombreEntry: PGtkWidget;
    FRegUsuarioEntry: PGtkWidget;
    FRegEmailEntry: PGtkWidget;
    FRegTelefonoEntry: PGtkWidget;
    FRegPasswordEntry: PGtkWidget;

    procedure SetupLoginWindow;
    procedure SetupRegisterWindow;

  public
    constructor Create;
    destructor Destroy; override;
    procedure Show;
    procedure Hide;
  end;

// Callbacks
procedure OnLoginClicked(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnCreateAccountClicked(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnRegisterClicked(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnCancelRegisterClicked(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnWindowDestroy(widget: PGtkWidget; data: gpointer); cdecl;

var
  LoginWin: TLoginWindow;

implementation

constructor TLoginWindow.Create;
begin
  SetupLoginWindow;
  SetupRegisterWindow;
end;

destructor TLoginWindow.Destroy;
begin
  if FWindow <> nil then
    gtk_widget_destroy(FWindow);
  if FRegisterWindow <> nil then
    gtk_widget_destroy(FRegisterWindow);
  inherited;
end;

procedure TLoginWindow.SetupLoginWindow;
var
  VBox, HBox: PGtkWidget;
  Label1: PGtkWidget;
begin
  // Crear ventana principal
  FWindow := gtk_window_new(GTK_WINDOW_TOPLEVEL);
  gtk_window_set_title(GTK_WINDOW(FWindow), 'EDDMail - Inicio de Sesión');
  gtk_window_set_default_size(GTK_WINDOW(FWindow), 400, 300);
  gtk_window_set_position(GTK_WINDOW(FWindow), GTK_WIN_POS_CENTER);

  // Conectar señal de destrucción
  g_signal_connect(G_OBJECT(FWindow), 'destroy', G_CALLBACK(@OnWindowDestroy), nil);

  // Crear contenedor vertical
  VBox := gtk_vbox_new(False, 10);
  gtk_container_add(GTK_CONTAINER(FWindow), VBox);
  gtk_container_set_border_width(GTK_CONTAINER(VBox), 20);

  // Título
  Label1 := gtk_label_new('EDDMail');
  gtk_label_set_markup(GTK_LABEL(Label1), '<span size="x-large" weight="bold">EDDMail</span>');
  gtk_box_pack_start(GTK_BOX(VBox), Label1, False, False, 20);

  // Campo de email
  Label1 := gtk_label_new('Email:');
  gtk_misc_set_alignment(GTK_MISC(Label1), 0.0, 0.5);
  gtk_box_pack_start(GTK_BOX(VBox), Label1, False, False, 5);

  FEmailEntry := gtk_entry_new;
  gtk_box_pack_start(GTK_BOX(VBox), FEmailEntry, False, False, 5);

  // Campo de contraseña
  Label1 := gtk_label_new('Password:');
  gtk_misc_set_alignment(GTK_MISC(Label1), 0.0, 0.5);
  gtk_box_pack_start(GTK_BOX(VBox), Label1, False, False, 5);

  FPasswordEntry := gtk_entry_new;
  gtk_entry_set_visibility(GTK_ENTRY(FPasswordEntry), False);
  gtk_box_pack_start(GTK_BOX(VBox), FPasswordEntry, False, False, 5);

  // Botones
  HBox := gtk_hbox_new(True, 10);
  gtk_box_pack_start(GTK_BOX(VBox), HBox, False, False, 20);

  FLoginButton := gtk_button_new_with_label('Iniciar Sesión');
  g_signal_connect(G_OBJECT(FLoginButton), 'clicked', G_CALLBACK(@OnLoginClicked), Self);
  gtk_box_pack_start(GTK_BOX(HBox), FLoginButton, True, True, 5);

  FCreateAccountButton := gtk_button_new_with_label('Crear Cuenta');
  g_signal_connect(G_OBJECT(FCreateAccountButton), 'clicked', G_CALLBACK(@OnCreateAccountClicked), Self);
  gtk_box_pack_start(GTK_BOX(HBox), FCreateAccountButton, True, True, 5);

  // Label de estado
  FStatusLabel := gtk_label_new('');
  gtk_box_pack_start(GTK_BOX(VBox), FStatusLabel, False, False, 10);
end;

procedure TLoginWindow.SetupRegisterWindow;
var
  VBox, HBox: PGtkWidget;
  Label1: PGtkWidget;
  RegisterButton, CancelButton: PGtkWidget;
begin
  // Crear ventana de registro
  FRegisterWindow := gtk_window_new(GTK_WINDOW_TOPLEVEL);
  gtk_window_set_title(GTK_WINDOW(FRegisterWindow), 'EDDMail - Crear Cuenta');
  gtk_window_set_default_size(GTK_WINDOW(FRegisterWindow), 400, 400);
  gtk_window_set_position(GTK_WINDOW(FRegisterWindow), GTK_WIN_POS_CENTER);
  gtk_window_set_modal(GTK_WINDOW(FRegisterWindow), True);

  // Crear contenedor vertical
  VBox := gtk_vbox_new(False, 10);
  gtk_container_add(GTK_CONTAINER(FRegisterWindow), VBox);
  gtk_container_set_border_width(GTK_CONTAINER(VBox), 20);

  // Título
  Label1 := gtk_label_new('Crear Nueva Cuenta');
  gtk_label_set_markup(GTK_LABEL(Label1), '<span size="large" weight="bold">Crear Nueva Cuenta</span>');
  gtk_box_pack_start(GTK_BOX(VBox), Label1, False, False, 20);

  // Campo nombre
  Label1 := gtk_label_new('Nombre:');
  gtk_misc_set_alignment(GTK_MISC(Label1), 0.0, 0.5);
  gtk_box_pack_start(GTK_BOX(VBox), Label1, False, False, 5);

  FRegNombreEntry := gtk_entry_new;
  gtk_box_pack_start(GTK_BOX(VBox), FRegNombreEntry, False, False, 5);

  // Campo usuario
  Label1 := gtk_label_new('Usuario:');
  gtk_misc_set_alignment(GTK_MISC(Label1), 0.0, 0.5);
  gtk_box_pack_start(GTK_BOX(VBox), Label1, False, False, 5);

  FRegUsuarioEntry := gtk_entry_new;
  gtk_box_pack_start(GTK_BOX(VBox), FRegUsuarioEntry, False, False, 5);

  // Campo email
  Label1 := gtk_label_new('Email:');
  gtk_misc_set_alignment(GTK_MISC(Label1), 0.0, 0.5);
  gtk_box_pack_start(GTK_BOX(VBox), Label1, False, False, 5);

  FRegEmailEntry := gtk_entry_new;
  gtk_box_pack_start(GTK_BOX(VBox), FRegEmailEntry, False, False, 5);

  // Campo teléfono
  Label1 := gtk_label_new('Teléfono:');
  gtk_misc_set_alignment(GTK_MISC(Label1), 0.0, 0.5);
  gtk_box_pack_start(GTK_BOX(VBox), Label1, False, False, 5);

  FRegTelefonoEntry := gtk_entry_new;
  gtk_box_pack_start(GTK_BOX(VBox), FRegTelefonoEntry, False, False, 5);

  // Campo contraseña
  Label1 := gtk_label_new('Password:');
  gtk_misc_set_alignment(GTK_MISC(Label1), 0.0, 0.5);
  gtk_box_pack_start(GTK_BOX(VBox), Label1, False, False, 5);

  FRegPasswordEntry := gtk_entry_new;
  gtk_entry_set_visibility(GTK_ENTRY(FRegPasswordEntry), False);
  gtk_box_pack_start(GTK_BOX(VBox), FRegPasswordEntry, False, False, 5);

  // Botones
  HBox := gtk_hbox_new(True, 10);
  gtk_box_pack_start(GTK_BOX(VBox), HBox, False, False, 20);

  RegisterButton := gtk_button_new_with_label('Registrar');
  g_signal_connect(G_OBJECT(RegisterButton), 'clicked', G_CALLBACK(@OnRegisterClicked), Self);
  gtk_box_pack_start(GTK_BOX(HBox), RegisterButton, True, True, 5);

  CancelButton := gtk_button_new_with_label('Cancelar');
  g_signal_connect(G_OBJECT(CancelButton), 'clicked', G_CALLBACK(@OnCancelRegisterClicked), Self);
  gtk_box_pack_start(GTK_BOX(HBox), CancelButton, True, True, 5);
end;

procedure TLoginWindow.Show;
begin
  gtk_widget_show_all(FWindow);
end;

procedure TLoginWindow.Hide;
begin
  gtk_widget_hide(FWindow);
end;

// Callbacks
procedure OnLoginClicked(widget: PGtkWidget; data: gpointer); cdecl;
var
  LoginWindow: TLoginWindow;
  Email, Password: String;
  User: PUser;
begin
  LoginWindow := TLoginWindow(data);

  Email := gtk_entry_get_text(GTK_ENTRY(LoginWindow.FEmailEntry));
  Password := gtk_entry_get_text(GTK_ENTRY(LoginWindow.FPasswordEntry));

  // Validar campos
  if (Length(Email) = 0) or (Length(Password) = 0) then
  begin
    gtk_label_set_text(GTK_LABEL(LoginWindow.FStatusLabel), 'Por favor complete todos los campos');
    Exit;
  end;

  // Intentar login
  User := LoginUser(Email, Password);

  if User <> nil then
  begin
    gtk_label_set_text(GTK_LABEL(LoginWindow.FStatusLabel), 'Login exitoso');

    // Ocultar ventana de login
    LoginWindow.Hide;

    // Mostrar ventana correspondiente
    if IsRootUser then
    begin
      RootWin := TRootWindow.Create;
      RootWin.Show;
    end
    else
    begin
      UserWin := TUserWindow.Create;
      UserWin.Show;
    end;
  end
  else
  begin
    gtk_label_set_text(GTK_LABEL(LoginWindow.FStatusLabel), 'Error: Credenciales incorrectas');
  end;
end;

procedure OnCreateAccountClicked(widget: PGtkWidget; data: gpointer); cdecl;
var
  LoginWindow: TLoginWindow;
begin
  LoginWindow := TLoginWindow(data);
  gtk_widget_show_all(LoginWindow.FRegisterWindow);
end;

procedure OnRegisterClicked(widget: PGtkWidget; data: gpointer); cdecl;
var
  LoginWindow: TLoginWindow;
  Nombre, Usuario, Email, Telefono, Password: String;
begin
  LoginWindow := TLoginWindow(data);

  Nombre := gtk_entry_get_text(GTK_ENTRY(LoginWindow.FRegNombreEntry));
  Usuario := gtk_entry_get_text(GTK_ENTRY(LoginWindow.FRegUsuarioEntry));
  Email := gtk_entry_get_text(GTK_ENTRY(LoginWindow.FRegEmailEntry));
  Telefono := gtk_entry_get_text(GTK_ENTRY(LoginWindow.FRegTelefonoEntry));
  Password := gtk_entry_get_text(GTK_ENTRY(LoginWindow.FRegPasswordEntry));

  // Validar campos (puedes añadir mensajes si quieres)
  if (Length(Nombre) = 0) or (Length(Usuario) = 0) or (Length(Email) = 0) or
     (Length(Telefono) = 0) or (Length(Password) = 0) then
    Exit;

  if not ValidateEmail(Email) then
    Exit;

  if not ValidatePassword(Password) then
    Exit;

  // Intentar registrar
  if RegisterUser(Nombre, Usuario, Email, Telefono, Password) then
  begin
    // Limpiar campos
    gtk_entry_set_text(GTK_ENTRY(LoginWindow.FRegNombreEntry), '');
    gtk_entry_set_text(GTK_ENTRY(LoginWindow.FRegUsuarioEntry), '');
    gtk_entry_set_text(GTK_ENTRY(LoginWindow.FRegEmailEntry), '');
    gtk_entry_set_text(GTK_ENTRY(LoginWindow.FRegTelefonoEntry), '');
    gtk_entry_set_text(GTK_ENTRY(LoginWindow.FRegPasswordEntry), '');

    // Ocultar ventana de registro
    gtk_widget_hide(LoginWindow.FRegisterWindow);

    gtk_label_set_text(GTK_LABEL(LoginWindow.FStatusLabel), 'Cuenta creada exitosamente');
  end
  else
  begin
    // Mostrar error de registro si lo deseas
  end;
end;

procedure OnCancelRegisterClicked(widget: PGtkWidget; data: gpointer); cdecl;
var
  LoginWindow: TLoginWindow;
begin
  LoginWindow := TLoginWindow(data);
  gtk_widget_hide(LoginWindow.FRegisterWindow);
end;

procedure OnWindowDestroy(widget: PGtkWidget; data: gpointer); cdecl;
begin
  gtk_main_quit;
end;

end.

