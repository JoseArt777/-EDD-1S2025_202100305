unit UUser;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, UStructures;

type
  TUserManager = class
  private
    FUsers: TUserList;
    FCurrentUser: PUser;
    FNextUserId: Integer;
  public
    constructor Create;
    destructor Destroy; override;

    // Gestión de usuarios
    function RegisterUser(nombre, usuario, email, telefono, password: string): Boolean;
    function LoginUser(email, password: string): Boolean;
    procedure LogoutUser;
    function UpdateProfile(nombre, usuario, telefono: string): Boolean;

    // Getters
    function GetCurrentUser: PUser;
    function GetUserByEmail(email: string): PUser;
    function IsUserLoggedIn: Boolean;

    // Carga masiva
    procedure LoadUsersFromJSON(filename: string);

    // Validaciones
    function ValidateEmail(email: string): Boolean;
    function ValidateUniqueEmail(email: string): Boolean;
    function ValidateUniqueUsername(username: string): Boolean;

    property Users: TUserList read FUsers;
    property CurrentUser: PUser read FCurrentUser;
  end;

implementation

constructor TUserManager.Create;
begin
  inherited Create;
  FUsers := TUserList.Create;
  FCurrentUser := nil;
  FNextUserId := 1;

  // Agregar usuario root por defecto
  FUsers.AddUser(FNextUserId, 'Administrador', 'root', 'root@edd.com', '0000-0000', 'root123');
  Inc(FNextUserId);
end;

destructor TUserManager.Destroy;
begin
  FUsers.Free;
  inherited Destroy;
end;

function TUserManager.RegisterUser(nombre, usuario, email, telefono, password: string): Boolean;
begin
  Result := False;

  // Validaciones
  if not ValidateEmail(email) then Exit;
  if not ValidateUniqueEmail(email) then Exit;
  if not ValidateUniqueUsername(usuario) then Exit;
  if Trim(nombre) = '' then Exit;
  if Trim(password) = '' then Exit;

  // Registrar usuario
  FUsers.AddUser(FNextUserId, nombre, usuario, email, telefono, password);
  Inc(FNextUserId);
  Result := True;
end;

function TUserManager.LoginUser(email, password: string): Boolean;
begin
  Result := False;
  FCurrentUser := FUsers.AuthenticateUser(email, password);
  Result := FCurrentUser <> nil;
end;

procedure TUserManager.LogoutUser;
begin
  FCurrentUser := nil;
end;

function TUserManager.UpdateProfile(nombre, usuario, telefono: string): Boolean;
begin
  Result := False;
  if FCurrentUser = nil then Exit;

  // Validar que el nuevo usuario no esté en uso (excepto el actual)
  if usuario <> FCurrentUser^.usuario then
  begin
    if not ValidateUniqueUsername(usuario) then Exit;
  end;

  if Trim(nombre) = '' then Exit;

  FUsers.UpdateUser(FCurrentUser, nombre, usuario, telefono);
  Result := True;
end;

function TUserManager.GetCurrentUser: PUser;
begin
  Result := FCurrentUser;
end;

function TUserManager.GetUserByEmail(email: string): PUser;
begin
  Result := FUsers.FindUser(email);
end;

function TUserManager.IsUserLoggedIn: Boolean;
begin
  Result := FCurrentUser <> nil;
end;

procedure TUserManager.LoadUsersFromJSON(filename: string);
var
  userCurrent: PUser;
begin
  FUsers.LoadFromJSON(filename);

  // Actualizar el siguiente ID basado en los usuarios cargados
  userCurrent := FUsers.Head;
  while userCurrent <> nil do
  begin
    if userCurrent^.id >= FNextUserId then
      FNextUserId := userCurrent^.id + 1;
    userCurrent := userCurrent^.siguiente;
  end;
end;

function TUserManager.ValidateEmail(email: string): Boolean;
begin
  Result := (Pos('@', email) > 0) and (Pos('.', email) > Pos('@', email));
end;

function TUserManager.ValidateUniqueEmail(email: string): Boolean;
begin
  Result := FUsers.FindUser(email) = nil;
end;

function TUserManager.ValidateUniqueUsername(username: string): Boolean;
begin
  Result := FUsers.FindUserByUsername(username) = nil;
end;

end.
