unit RootWindow;

{$mode objfpc}{$H+}

interface

uses
  GTK2, GDK2, GLib2, SysUtils, Classes, DataStructures, SystemCore, UIBase,
  UserManager, EmailManager, ContactManager, CommunityManager, ReportGenerator;

type
  TRootWindow = class(TBaseWindow)
  private
    FMainVBox: PGtkWidget;
    FNotebook: PGtkWidget;
    FStatusLabel: PGtkWidget;
    FLoadStatusLabel: PGtkWidget;

    // Página de carga masiva
    FFileEntry: PGtkWidget;
    FSelectFileButton: PGtkWidget;
    FLoadButton: PGtkWidget;

    // Página de comunidades
    FCommunityNameEntry: PGtkWidget;
    FCreateCommunityButton: PGtkWidget;
    FCommunityCombo: PGtkWidget;
    FUserEmailEntry: PGtkWidget;
    FAddUserButton: PGtkWidget;
    FCommunityStatusLabel: PGtkWidget;

    // Página de reportes
    FUsersReportButton: PGtkWidget;
    FRelationsReportButton: PGtkWidget;
    FReportsStatusLabel: PGtkWidget;

    procedure SetupNotebook;
    procedure SetupLoadMassivePage;
    procedure SetupCommunitiesPage;
    procedure SetupReportsPage;
    procedure RefreshCommunityCombo;
    procedure ClearComboBox(ComboBox: PGtkWidget);

  protected
    procedure SetupComponents; override;
    procedure ConnectSignals; override;

  public
    constructor Create;
    destructor Destroy; override;
    procedure Show; reintroduce; // evitar warning de método oculto
    procedure Hide; reintroduce; // evitar warning de método oculto
  end;

// Callbacks
procedure OnSelectFileClicked(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnLoadFileClicked(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnCreateCommunityClicked(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnAddUserToCommunityClicked(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnUsersReportClicked(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnRelationsReportClicked(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnRootWindowDestroy(widget: PGtkWidget; data: gpointer); cdecl;

var
  RootWin: TRootWindow;

implementation

constructor TRootWindow.Create;
begin
  inherited Create('EDDMail - Administrador Root', 600, 500);
  RefreshCommunityCombo;
end;

destructor TRootWindow.Destroy;
begin
  inherited;
end;

procedure TRootWindow.SetupComponents;
begin
  FMainVBox := TUIUtils.CreateVBox(10);
  gtk_container_add(GTK_CONTAINER(FWindow), FMainVBox);

  SetupNotebook;

  // Status bar
  FStatusLabel := TUIUtils.CreateLabel('Listo', False);
  gtk_box_pack_end(GTK_BOX(FMainVBox), FStatusLabel, False, False, 0);
end;

procedure TRootWindow.ConnectSignals;
begin
  inherited;
  g_signal_connect(G_OBJECT(FWindow), 'destroy', G_CALLBACK(@OnRootWindowDestroy), Self);
end;

procedure TRootWindow.SetupNotebook;
begin
  FNotebook := gtk_notebook_new;
  gtk_box_pack_start(GTK_BOX(FMainVBox), FNotebook, True, True, 0);

  SetupLoadMassivePage;
  SetupCommunitiesPage;
  SetupReportsPage;
end;

procedure TRootWindow.SetupLoadMassivePage;
var
  PageVBox, HBox: PGtkWidget;
  Label1: PGtkWidget;
begin
  PageVBox := TUIUtils.CreateVBox(10);
  gtk_container_set_border_width(GTK_CONTAINER(PageVBox), 10);

  Label1 := TUIUtils.CreateLabel('Cargar Usuarios Masivamente', True);
  gtk_box_pack_start(GTK_BOX(PageVBox), Label1, False, False, 0);

  HBox := TUIUtils.CreateHBox(5);
  FFileEntry := TUIUtils.CreateEntry('Seleccionar archivo JSON...');
  FSelectFileButton := TUIUtils.CreateButton('Examinar', @OnSelectFileClicked, Self);

  gtk_box_pack_start(GTK_BOX(HBox), FFileEntry, True, True, 0);
  gtk_box_pack_start(GTK_BOX(HBox), FSelectFileButton, False, False, 0);
  gtk_box_pack_start(GTK_BOX(PageVBox), HBox, False, False, 0);

  FLoadButton := TUIUtils.CreateButton('Cargar Usuarios', @OnLoadFileClicked, Self);
  gtk_box_pack_start(GTK_BOX(PageVBox), FLoadButton, False, False, 0);

  FLoadStatusLabel := TUIUtils.CreateLabel('', False);
  gtk_box_pack_start(GTK_BOX(PageVBox), FLoadStatusLabel, False, False, 0);

  gtk_notebook_append_page(GTK_NOTEBOOK(FNotebook), PageVBox,
                           gtk_label_new('Carga Masiva'));
end;

procedure TRootWindow.SetupCommunitiesPage;
var
  PageVBox, HBox: PGtkWidget;
  Label1, Label2: PGtkWidget;
begin
  PageVBox := TUIUtils.CreateVBox(10);
  gtk_container_set_border_width(GTK_CONTAINER(PageVBox), 10);

  Label1 := TUIUtils.CreateLabel('Gestión de Comunidades', True);
  gtk_box_pack_start(GTK_BOX(PageVBox), Label1, False, False, 0);

  // Crear comunidad
  HBox := TUIUtils.CreateHBox(5);
  FCommunityNameEntry := TUIUtils.CreateEntry('Nombre de la comunidad');
  FCreateCommunityButton := TUIUtils.CreateButton('Crear', @OnCreateCommunityClicked, Self);

  gtk_box_pack_start(GTK_BOX(HBox), FCommunityNameEntry, True, True, 0);
  gtk_box_pack_start(GTK_BOX(HBox), FCreateCommunityButton, False, False, 0);
  gtk_box_pack_start(GTK_BOX(PageVBox), HBox, False, False, 0);

  // Agregar usuario a comunidad
  Label2 := TUIUtils.CreateLabel('Agregar Usuario a Comunidad:', False);
  gtk_box_pack_start(GTK_BOX(PageVBox), Label2, False, False, 0);

  FCommunityCombo := TUIUtils.CreateComboBox;
  gtk_box_pack_start(GTK_BOX(PageVBox), FCommunityCombo, False, False, 0);

  HBox := TUIUtils.CreateHBox(5);
  FUserEmailEntry := TUIUtils.CreateEntry('Email del usuario');
  FAddUserButton := TUIUtils.CreateButton('Agregar', @OnAddUserToCommunityClicked, Self);

  gtk_box_pack_start(GTK_BOX(HBox), FUserEmailEntry, True, True, 0);
  gtk_box_pack_start(GTK_BOX(HBox), FAddUserButton, False, False, 0);
  gtk_box_pack_start(GTK_BOX(PageVBox), HBox, False, False, 0);

  FCommunityStatusLabel := TUIUtils.CreateLabel('', False);
  gtk_box_pack_start(GTK_BOX(PageVBox), FCommunityStatusLabel, False, False, 0);

  gtk_notebook_append_page(GTK_NOTEBOOK(FNotebook), PageVBox,
                           gtk_label_new('Comunidades'));
end;

procedure TRootWindow.SetupReportsPage;
var
  PageVBox: PGtkWidget;
  Label1: PGtkWidget;
begin
  PageVBox := TUIUtils.CreateVBox(10);
  gtk_container_set_border_width(GTK_CONTAINER(PageVBox), 10);

  Label1 := TUIUtils.CreateLabel('Generar Reportes', True);
  gtk_box_pack_start(GTK_BOX(PageVBox), Label1, False, False, 0);

  FUsersReportButton := TUIUtils.CreateButton('Reporte de Usuarios', @OnUsersReportClicked, Self);
  gtk_box_pack_start(GTK_BOX(PageVBox), FUsersReportButton, False, False, 0);

  FRelationsReportButton := TUIUtils.CreateButton('Reporte de Relaciones', @OnRelationsReportClicked, Self);
  gtk_box_pack_start(GTK_BOX(PageVBox), FRelationsReportButton, False, False, 0);

  FReportsStatusLabel := TUIUtils.CreateLabel('', False);
  gtk_box_pack_start(GTK_BOX(PageVBox), FReportsStatusLabel, False, False, 0);

  gtk_notebook_append_page(GTK_NOTEBOOK(FNotebook), PageVBox,
                           gtk_label_new('Reportes'));
end;

procedure TRootWindow.ClearComboBox(ComboBox: PGtkWidget);
var
  Model: PGtkTreeModel;
  Count: Integer;
  i: Integer;
begin
  Model := gtk_combo_box_get_model(GTK_COMBO_BOX(ComboBox));
  if Model <> nil then
  begin
    Count := gtk_tree_model_iter_n_children(Model, nil);
    for i := Count - 1 downto 0 do
      gtk_combo_box_remove_text(GTK_COMBO_BOX(ComboBox), i);
  end;
end;

procedure TRootWindow.RefreshCommunityCombo;
var
  CurrentCommunity: DataStructures.PCommunity; // <-- tipo desde DataStructures
  ComboText: String;
begin
  if FCommunityCombo = nil then Exit;

  ClearComboBox(FCommunityCombo);

  // head global desde CommunityManager
  CurrentCommunity := CommunityManager.CommunitiesHead;
  while CurrentCommunity <> nil do
  begin
    ComboText := IntToStr(CurrentCommunity^.Id) + ' - ' + CurrentCommunity^.Nombre;
    gtk_combo_box_append_text(GTK_COMBO_BOX(FCommunityCombo), PChar(ComboText));
    CurrentCommunity := CurrentCommunity^.Next;
  end;
end;

procedure TRootWindow.Show;
begin
  gtk_widget_show_all(FWindow);
end;

procedure TRootWindow.Hide;
begin
  gtk_widget_hide(FWindow);
end;

// ============================================================================
// Callbacks Implementation
// ============================================================================

procedure OnSelectFileClicked(widget: PGtkWidget; data: gpointer); cdecl;
var
  Dialog: PGtkWidget;
  Response: Integer;
  Filename: PChar;
  RootWin: TRootWindow;
begin
  RootWin := TRootWindow(data);

  Dialog := gtk_file_chooser_dialog_new('Seleccionar archivo JSON',
                                       GTK_WINDOW(RootWin.Window),
                                       GTK_FILE_CHOOSER_ACTION_OPEN,
                                       GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,
                                       GTK_STOCK_OPEN, GTK_RESPONSE_ACCEPT,
                                       nil);

  Response := gtk_dialog_run(GTK_DIALOG(Dialog));
  if Response = GTK_RESPONSE_ACCEPT then
  begin
    Filename := gtk_file_chooser_get_filename(GTK_FILE_CHOOSER(Dialog));
    gtk_entry_set_text(GTK_ENTRY(RootWin.FFileEntry), Filename);
    g_free(Filename);
  end;

  gtk_widget_destroy(Dialog);
end;

procedure OnLoadFileClicked(widget: PGtkWidget; data: gpointer); cdecl;
var
  RootWin: TRootWindow;
  Filename: String;
  Result: Boolean;
begin
  RootWin := TRootWindow(data);
  Filename := gtk_entry_get_text(GTK_ENTRY(RootWin.FFileEntry));

  if Filename = '' then
  begin
    TUIUtils.ShowErrorMessage(RootWin.Window, 'Por favor seleccione un archivo');
    Exit;
  end;

  Result := LoadUsersFromJSON(Filename);

  if Result then
  begin
    gtk_label_set_text(GTK_LABEL(RootWin.FLoadStatusLabel), 'Usuarios cargados exitosamente');
    TUIUtils.ShowInfoMessage(RootWin.Window, 'Usuarios cargados exitosamente');
  end
  else
  begin
    gtk_label_set_text(GTK_LABEL(RootWin.FLoadStatusLabel), 'Error al cargar usuarios');
    TUIUtils.ShowErrorMessage(RootWin.Window, 'Error al cargar usuarios del archivo');
  end;
end;

procedure OnCreateCommunityClicked(widget: PGtkWidget; data: gpointer); cdecl;
var
  RootWin: TRootWindow;
  CommunityName: String;
  Result: Boolean;
begin
  RootWin := TRootWindow(data);
  CommunityName := gtk_entry_get_text(GTK_ENTRY(RootWin.FCommunityNameEntry));

  if CommunityName = '' then
  begin
    TUIUtils.ShowErrorMessage(RootWin.Window, 'Por favor ingrese un nombre para la comunidad');
    Exit;
  end;

  Result := CreateCommunity(CommunityName);

  if Result then
  begin
    gtk_label_set_text(GTK_LABEL(RootWin.FCommunityStatusLabel), 'Comunidad creada exitosamente');
    gtk_entry_set_text(GTK_ENTRY(RootWin.FCommunityNameEntry), '');
    RootWin.RefreshCommunityCombo;
  end
  else
  begin
    gtk_label_set_text(GTK_LABEL(RootWin.FCommunityStatusLabel), 'Error al crear la comunidad');
  end;
end;

procedure OnAddUserToCommunityClicked(widget: PGtkWidget; data: gpointer); cdecl;
var
  RootWin: TRootWindow;
  UserEmail, ComboText: String;
  CommunityId: Integer;
  SpacePos: Integer;
  ComboPC: PChar;
begin
  RootWin := TRootWindow(data);
  UserEmail := gtk_entry_get_text(GTK_ENTRY(RootWin.FUserEmailEntry));

  // Obtener texto seleccionado del combo de forma segura
  ComboPC := gtk_combo_box_get_active_text(GTK_COMBO_BOX(RootWin.FCommunityCombo));
  if ComboPC <> nil then
  begin
    ComboText := String(ComboPC);
    g_free(ComboPC);
  end
  else
    ComboText := '';

  if (UserEmail = '') or (ComboText = '') then
  begin
    TUIUtils.ShowErrorMessage(RootWin.Window, 'Por favor complete todos los campos');
    Exit;
  end;

  // Extraer ID de la comunidad del texto del combo (formato: "<id> - <nombre>")
  SpacePos := Pos(' ', ComboText);
  if SpacePos > 0 then
  begin
    try
      CommunityId := StrToInt(Copy(ComboText, 1, SpacePos - 1));

      if AddUserToCommunity(CommunityId, UserEmail) then
      begin
        gtk_entry_set_text(GTK_ENTRY(RootWin.FUserEmailEntry), '');
        gtk_label_set_text(GTK_LABEL(RootWin.FCommunityStatusLabel), 'Usuario agregado exitosamente');
      end
      else
      begin
        gtk_label_set_text(GTK_LABEL(RootWin.FCommunityStatusLabel), 'Error al agregar usuario');
      end;
    except
      gtk_label_set_text(GTK_LABEL(RootWin.FCommunityStatusLabel), 'Error: ID de comunidad inválido');
    end;
  end
  else
  begin
    gtk_label_set_text(GTK_LABEL(RootWin.FCommunityStatusLabel), 'Formato de comunidad inválido');
  end;
end;

procedure OnUsersReportClicked(widget: PGtkWidget; data: gpointer); cdecl;
var
  RootWin: TRootWindow;
begin
  RootWin := TRootWindow(data);

  if SaveUsersReport then
    gtk_label_set_text(GTK_LABEL(RootWin.FReportsStatusLabel), 'Reporte de usuarios generado exitosamente')
  else
    gtk_label_set_text(GTK_LABEL(RootWin.FReportsStatusLabel), 'Error al generar el reporte de usuarios');
end;

procedure OnRelationsReportClicked(widget: PGtkWidget; data: gpointer); cdecl;
var
  RootWin: TRootWindow;
begin
  RootWin := TRootWindow(data);

  if SaveRelationsReport then
    gtk_label_set_text(GTK_LABEL(RootWin.FReportsStatusLabel), 'Reporte de relaciones generado exitosamente')
  else
    gtk_label_set_text(GTK_LABEL(RootWin.FReportsStatusLabel), 'Error al generar el reporte de relaciones');
end;

procedure OnRootWindowDestroy(widget: PGtkWidget; data: gpointer); cdecl;
begin
  gtk_main_quit;
end;

end.


// Función de respaldo para obtener comunidades
function GetCommunityList: PCommunity;
begin
  // Esta función debe ser implementada correctamente
  // Por ahora retorna nil para evitar errores
  Result := nil;
end;
