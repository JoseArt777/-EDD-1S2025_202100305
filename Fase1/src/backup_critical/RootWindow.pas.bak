unit RootWindow;

{$mode objfpc}{$H+}

interface

uses
  GTK2, GDK2, GLib2, SysUtils, Classes, DataStructures, SystemCore, UIBase,
  UserManager, EmailManager, ContactManager, CommunityManager, ReportGenerator;

type
  TRootWindow = class(TBaseWindow)
  private
    FMainVBox: PGtkWidget;
    FNotebook: PGtkWidget;
    FStatusLabel: PGtkWidget;

    // Página de carga masiva
    FFileEntry: PGtkWidget;
    FSelectFileButton: PGtkWidget;
    FLoadButton: PGtkWidget;

    // Página de comunidades
    FCommunityNameEntry: PGtkWidget;
    FCreateCommunityButton: PGtkWidget;
    FCommunityCombo: PGtkWidget;
    FUserEmailEntry: PGtkWidget;
    FAddUserButton: PGtkWidget;
    FCommunityStatusLabel: PGtkWidget;

    // Página de reportes
    FUsersReportButton: PGtkWidget;
    FRelationsReportButton: PGtkWidget;
    FReportsStatusLabel: PGtkWidget;

    procedure SetupNotebook;
    procedure SetupLoadPage;
    procedure SetupCommunityPage;
    procedure SetupReportsPage;
    procedure RefreshCommunityCombo;

  protected
    procedure SetupComponents; override;
    procedure ConnectSignals; override;

  public
    constructor Create;
    destructor Destroy; override;
  end;

// Callbacks
procedure OnSelectFileClicked(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnLoadFileClicked(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnCreateCommunityClicked(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnAddUserToCommunityClicked(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnUsersReportClicked(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnRelationsReportClicked(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnRootWindowDestroy(widget: PGtkWidget; data: gpointer); cdecl;

var
  RootWin: TRootWindow;

implementation

constructor TRootWindow.Create;
begin
  SetupMainWindow;
  SetupLoadMassivePage;
  SetupCommunitiesPage;
  SetupReportsPage;
  RefreshCommunityCombo;
end;

destructor TRootWindow.Destroy;
begin
  if FWindow <> nil then
    gtk_widget_destroy(FWindow);
  inherited;
end;

procedure TRootWindow.SetupMainWindow;
var
  VBox: PGtkWidget;
  Label1: PGtkWidget;
begin
  // Crear ventana principal
  FWindow := gtk_window_new(GTK_WINDOW_TOPLEVEL);
  gtk_window_set_title(GTK_WINDOW(FWindow), 'EDDMail - Administrador Root');
  gtk_window_set_default_size(GTK_WINDOW(FWindow), 600, 500);
  gtk_window_set_position(GTK_WINDOW(FWindow), GTK_WIN_POS_CENTER);

  // Conectar señal de destrucción
  g_signal_connect(G_OBJECT(FWindow), 'destroy', G_CALLBACK(@OnRootWindowDestroy), nil);

  // Crear contenedor vertical
  VBox := gtk_vbox_new(False, 10);
  gtk_container_add(GTK_CONTAINER(FWindow), VBox);
  gtk_container_set_border_width(GTK_CONTAINER(VBox), 10);

  // Título
  Label1 := gtk_label_new('Panel de Administración Root');
  gtk_label_set_markup(GTK_LABEL(Label1), '<span size="large" weight="bold">Panel de Administración Root</span>');
  gtk_box_pack_start(GTK_BOX(VBox), Label1, False, False, 10);

  // Crear notebook (pestañas)
  FNotebook := gtk_notebook_new;
  gtk_box_pack_start(GTK_BOX(VBox), FNotebook, True, True, 0);
end;

procedure TRootWindow.SetupLoadMassivePage;
var
  VBox: PGtkWidget;
  Label1: PGtkWidget;
  TabLabel: PGtkWidget;
begin
  // Crear página de carga masiva
  VBox := gtk_vbox_new(False, 20);
  gtk_container_set_border_width(GTK_CONTAINER(VBox), 20);

  // Título de la sección
  Label1 := gtk_label_new('Carga Masiva de Usuarios');
  gtk_label_set_markup(GTK_LABEL(Label1), '<span size="medium" weight="bold">Carga Masiva de Usuarios</span>');
  gtk_box_pack_start(GTK_BOX(VBox), Label1, False, False, 10);

  // Descripción
  Label1 := gtk_label_new('Seleccione un archivo JSON para cargar usuarios masivamente:');
  gtk_box_pack_start(GTK_BOX(VBox), Label1, False, False, 10);

  // Botón para seleccionar archivo
  FLoadFileButton := gtk_button_new_with_label('Seleccionar Archivo JSON');
  g_signal_connect(G_OBJECT(FLoadFileButton), 'clicked', G_CALLBACK(@OnLoadFileClicked), Self);
  gtk_box_pack_start(GTK_BOX(VBox), FLoadFileButton, False, False, 10);

  // Label de estado
  FLoadStatusLabel := gtk_label_new('');
  gtk_box_pack_start(GTK_BOX(VBox), FLoadStatusLabel, False, False, 10);

  // Agregar página al notebook
  TabLabel := gtk_label_new('Carga Masiva');
  gtk_notebook_append_page(GTK_NOTEBOOK(FNotebook), VBox, TabLabel);
end;

procedure TRootWindow.SetupCommunitiesPage;
var
  VBox, HBox, Frame: PGtkWidget;
  Label1: PGtkWidget;
  TabLabel: PGtkWidget;
begin
  // Crear página de comunidades
  VBox := gtk_vbox_new(False, 20);
  gtk_container_set_border_width(GTK_CONTAINER(VBox), 20);

  // Sección para crear comunidades
  Frame := gtk_frame_new('Crear Nueva Comunidad');
  gtk_box_pack_start(GTK_BOX(VBox), Frame, False, False, 10);

  HBox := gtk_hbox_new(False, 10);
  gtk_container_add(GTK_CONTAINER(Frame), HBox);
  gtk_container_set_border_width(GTK_CONTAINER(HBox), 10);

  Label1 := gtk_label_new('Nombre:');
  gtk_box_pack_start(GTK_BOX(HBox), Label1, False, False, 5);

  FCommunityNameEntry := gtk_entry_new;
  gtk_box_pack_start(GTK_BOX(HBox), FCommunityNameEntry, True, True, 5);

  FCreateCommunityButton := gtk_button_new_with_label('Crear');
  g_signal_connect(G_OBJECT(FCreateCommunityButton), 'clicked', G_CALLBACK(@OnCreateCommunityClicked), Self);
  gtk_box_pack_start(GTK_BOX(HBox), FCreateCommunityButton, False, False, 5);

  // Sección para agregar usuarios a comunidades
  Frame := gtk_frame_new('Agregar Usuario a Comunidad');
  gtk_box_pack_start(GTK_BOX(VBox), Frame, False, False, 10);

  VBox := gtk_vbox_new(False, 10);
  gtk_container_add(GTK_CONTAINER(Frame), VBox);
  gtk_container_set_border_width(GTK_CONTAINER(VBox), 10);

  HBox := gtk_hbox_new(False, 10);
  gtk_box_pack_start(GTK_BOX(VBox), HBox, False, False, 5);

  Label1 := gtk_label_new('Comunidad:');
  gtk_box_pack_start(GTK_BOX(HBox), Label1, False, False, 5);

  FCommunityCombo := gtk_combo_box_new_text;
  gtk_box_pack_start(GTK_BOX(HBox), FCommunityCombo, True, True, 5);

  HBox := gtk_hbox_new(False, 10);
  gtk_box_pack_start(GTK_BOX(VBox), HBox, False, False, 5);

  Label1 := gtk_label_new('Email del Usuario:');
  gtk_box_pack_start(GTK_BOX(HBox), Label1, False, False, 5);

  FUserEmailEntry := gtk_entry_new;
  gtk_box_pack_start(GTK_BOX(HBox), FUserEmailEntry, True, True, 5);

  FAddUserButton := gtk_button_new_with_label('Agregar Usuario');
  g_signal_connect(G_OBJECT(FAddUserButton), 'clicked', G_CALLBACK(@OnAddUserToCommunityClicked), Self);
  gtk_box_pack_start(GTK_BOX(HBox), FAddUserButton, False, False, 5);

  // Label de estado
  FCommunityStatusLabel := gtk_label_new('');
  gtk_box_pack_start(GTK_BOX(VBox), FCommunityStatusLabel, False, False, 10);

  // Agregar página al notebook
  TabLabel := gtk_label_new('Comunidades');
  gtk_notebook_append_page(GTK_NOTEBOOK(FNotebook), VBox, TabLabel);
end;

procedure TRootWindow.SetupReportsPage;
var
  VBox: PGtkWidget;
  Label1: PGtkWidget;
  TabLabel: PGtkWidget;
begin
  // Crear página de reportes
  VBox := gtk_vbox_new(False, 20);
  gtk_container_set_border_width(GTK_CONTAINER(VBox), 20);

  // Título de la sección
  Label1 := gtk_label_new('Generación de Reportes');
  gtk_label_set_markup(GTK_LABEL(Label1), '<span size="medium" weight="bold">Generación de Reportes</span>');
  gtk_box_pack_start(GTK_BOX(VBox), Label1, False, False, 10);

  // Descripción
  Label1 := gtk_label_new('Los reportes se guardarán en la carpeta Root-Reportes/');
  gtk_box_pack_start(GTK_BOX(VBox), Label1, False, False, 10);

  // Botón reporte de usuarios
  FUsersReportButton := gtk_button_new_with_label('Generar Reporte de Usuarios');
  g_signal_connect(G_OBJECT(FUsersReportButton), 'clicked', G_CALLBACK(@OnUsersReportClicked), Self);
  gtk_box_pack_start(GTK_BOX(VBox), FUsersReportButton, False, False, 10);

  // Botón reporte de relaciones
  FRelationsReportButton := gtk_button_new_with_label('Generar Reporte de Relaciones');
  g_signal_connect(G_OBJECT(FRelationsReportButton), 'clicked', G_CALLBACK(@OnRelationsReportClicked), Self);
  gtk_box_pack_start(GTK_BOX(VBox), FRelationsReportButton, False, False, 10);

  // Label de estado
  FReportsStatusLabel := gtk_label_new('');
  gtk_box_pack_start(GTK_BOX(VBox), FReportsStatusLabel, False, False, 10);

  // Agregar página al notebook
  TabLabel := gtk_label_new('Reportes');
  gtk_notebook_append_page(GTK_NOTEBOOK(FNotebook), VBox, TabLabel);
end;

procedure TRootWindow.RefreshCommunityCombo;
var
  CurrentCommunity: PCommunity;
  ComboText: String;
begin
  // Limpiar combo
  // // gtk_combo_box_text_remove_all - TODO: Implementar para GTK2 - TODO: Implementar para GTK2(GTK_COMBO_BOX(FCommunityCombo));

  // Agregar comunidades existentes
  CurrentCommunity := CommunityList.GetFirst;
  while CurrentCommunity <> nil do
  begin
    ComboText := IntToStr(CurrentCommunity^.Id) + ' - ' + CurrentCommunity^.Nombre;
    gtk_combo_box_append_text(GTK_COMBO_BOX(FCommunityCombo), PChar(ComboText));
    CurrentCommunity := CurrentCommunity^.Next;
  end;
end;

procedure TRootWindow.Show;
begin
  gtk_widget_show_all(FWindow);
end;

procedure TRootWindow.Hide;
begin
  gtk_widget_hide(FWindow);
end;

// Callbacks
procedure OnLoadFileClicked(widget: PGtkWidget; data: gpointer); cdecl;
var
  RootWindow: TRootWindow;
  Dialog: PGtkWidget;
  FileName: String;
  Response: gint;
begin
  RootWindow := TRootWindow(data);

  // Crear diálogo de selección de archivo
  Dialog := gtk_file_chooser_dialog_new(
    'Seleccionar archivo JSON',
    GTK_WINDOW(RootWindow.FWindow),
    GTK_FILE_CHOOSER_ACTION_OPEN,
    GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,
    GTK_STOCK_OPEN, GTK_RESPONSE_ACCEPT,
    nil
  );

  // Filtro para archivos JSON
  Response := gtk_dialog_run(GTK_DIALOG(Dialog));

  if Response = GTK_RESPONSE_ACCEPT then
  begin
    FileName := gtk_file_chooser_get_filename(GTK_FILE_CHOOSER(Dialog));

    if LoadUsersFromJSON(FileName) then
      gtk_label_set_text(GTK_LABEL(RootWindow.FLoadStatusLabel), 'Usuarios cargados exitosamente')
    else
      gtk_label_set_text(GTK_LABEL(RootWindow.FLoadStatusLabel), 'Error al cargar usuarios');
  end;

  gtk_widget_destroy(Dialog);
end;

procedure OnCreateCommunityClicked(widget: PGtkWidget; data: gpointer); cdecl;
var
  RootWindow: TRootWindow;
  CommunityName: String;
begin
  RootWindow := TRootWindow(data);

  CommunityName := gtk_entry_get_text(GTK_ENTRY(RootWindow.FCommunityNameEntry));

  if Length(CommunityName) = 0 then
  begin
    gtk_label_set_text(GTK_LABEL(RootWindow.FCommunityStatusLabel), 'Error: Ingrese un nombre para la comunidad');
    Exit;
  end;

  if CreateCommunity(CommunityName) then
  begin
    gtk_entry_set_text(GTK_ENTRY(RootWindow.FCommunityNameEntry), '');
    gtk_label_set_text(GTK_LABEL(RootWindow.FCommunityStatusLabel), 'Comunidad creada exitosamente');
    RootWindow.RefreshCommunityCombo;
  end
  else
  begin
    gtk_label_set_text(GTK_LABEL(RootWindow.FCommunityStatusLabel), 'Error al crear la comunidad');
  end;
end;

procedure OnAddUserToCommunityClicked(widget: PGtkWidget; data: gpointer); cdecl;
var
  RootWindow: TRootWindow;
  UserEmail, ComboText: String;
  CommunityId: Integer;
  SpacePos: Integer;
begin
  RootWindow := TRootWindow(data);

  UserEmail := gtk_entry_get_text(GTK_ENTRY(RootWindow.FUserEmailEntry));
  ComboText := gtk_combo_box_get_active_text(GTK_COMBO_BOX(RootWindow.FCommunityCombo));

  if (Length(UserEmail) = 0) or (Length(ComboText) = 0) then
  begin
    gtk_label_set_text(GTK_LABEL(RootWindow.FCommunityStatusLabel), 'Error: Complete todos los campos');
    Exit;
  end;

  // Extraer ID de la comunidad del texto del combo
  SpacePos := Pos(' ', ComboText);
  if SpacePos > 0 then
  begin
    try
      CommunityId := StrToInt(Copy(ComboText, 1, SpacePos - 1));

      if AddUserToCommunity(CommunityId, UserEmail) then
      begin
        gtk_entry_set_text(GTK_ENTRY(RootWindow.FUserEmailEntry), '');
        gtk_label_set_text(GTK_LABEL(RootWindow.FCommunityStatusLabel), 'Usuario agregado a la comunidad exitosamente');
      end
      else
      begin
        gtk_label_set_text(GTK_LABEL(RootWindow.FCommunityStatusLabel), 'Error al agregar usuario a la comunidad');
      end;
    except
      gtk_label_set_text(GTK_LABEL(RootWindow.FCommunityStatusLabel), 'Error: ID de comunidad inválido');
    end;
  end;
end;

procedure OnUsersReportClicked(widget: PGtkWidget; data: gpointer); cdecl;
var
  RootWindow: TRootWindow;
begin
  RootWindow := TRootWindow(data);

  if SaveUsersReport then
    gtk_label_set_text(GTK_LABEL(RootWindow.FReportsStatusLabel), 'Reporte de usuarios generado exitosamente')
  else
    gtk_label_set_text(GTK_LABEL(RootWindow.FReportsStatusLabel), 'Error al generar el reporte de usuarios');
end;

procedure OnRelationsReportClicked(widget: PGtkWidget; data: gpointer); cdecl;
var
  RootWindow: TRootWindow;
begin
  RootWindow := TRootWindow(data);

  if SaveRelationsReport then
    gtk_label_set_text(GTK_LABEL(RootWindow.FReportsStatusLabel), 'Reporte de relaciones generado exitosamente')
  else
    gtk_label_set_text(GTK_LABEL(RootWindow.FReportsStatusLabel), 'Error al generar el reporte de relaciones');
end;

procedure OnRootWindowDestroy(widget: PGtkWidget; data: gpointer); cdecl;
begin
  gtk_main_quit;
end;

end.
