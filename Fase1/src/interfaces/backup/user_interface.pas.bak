unit user_interface;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, gtk2, glib2, UStructures, ULogin, UReports;

type
  TUserEmailManager = class
  private
    FInbox: TEmailList;
    FContacts: TContactList;
    FTrash: TEmailStack;
    FScheduledEmails: TEmailQueue;
    FNextEmailId: Integer;
    FNextContactId: Integer;
    FUserEmail: string;
    
  public
    constructor Create(userEmail: string);
    destructor Destroy; override;
    
    // Gestión de correos
    function SendEmail(destinatario, asunto, mensaje: string; out errorMsg: string): Boolean;
    function ScheduleEmail(destinatario, asunto, mensaje: string; fecha: TDateTime; out errorMsg: string): Boolean;
    procedure ProcessScheduledEmails;
    procedure DeleteEmail(email: PEmail);
    function RestoreFromTrash(emailId: Integer): Boolean;
    procedure AddSampleEmails; // Para datos de ejemplo
    
    // Gestión de contactos
    function AddContact(nombre, usuario, email, telefono: string; out errorMsg: string): Boolean;
    function IsContact(email: string): Boolean;
    procedure AddSampleContacts; // Para datos de ejemplo
    
    // Getters
    property Inbox: TEmailList read FInbox;
    property Contacts: TContactList read FContacts;
    property Trash: TEmailStack read FTrash;
    property ScheduledEmails: TEmailQueue read FScheduledEmails;
  end;

  TUserInterface = class
  private
    FMainWindow: PGtkWidget;
    FNotebook: PGtkWidget;
    
    // Bandeja de entrada
    FInboxTreeView: PGtkWidget;
    FInboxStore: PGtkListStore;
    FSortButton: PGtkWidget;
    FUnreadLabel: PGtkWidget;
    FEmailDetailWindow: PGtkWidget;
    
    // Enviar correo
    FSendDestinationEntry: PGtkWidget;
    FSendSubjectEntry: PGtkWidget;
    FSendMessageText: PGtkWidget;
    FSendButton: PGtkWidget;
    
    // Correos programados
    FScheduleDestinationEntry: PGtkWidget;
    FScheduleSubjectEntry: PGtkWidget;
    FScheduleMessageText: PGtkWidget;
    FScheduleDateEntry: PGtkWidget;
    FScheduleButton: PGtkWidget;
    FScheduledTreeView: PGtkWidget;
    FScheduledStore: PGtkListStore;
    FProcessScheduledButton: PGtkWidget;
    
    // Contactos
    FContactsNameEntry: PGtkWidget;
    FContactsUserEntry: PGtkWidget;
    FContactsEmailEntry: PGtkWidget;
    FContactsPhoneEntry: PGtkWidget;
    FAddContactButton: PGtkWidget;
    FContactsInfoLabel: PGtkWidget;
    FContactsNextButton: PGtkWidget;
    FContactsPrevButton: PGtkWidget;
    
    // Papelera
    FTrashTreeView: PGtkWidget;
    FTrashStore: PGtkListStore;
    FSearchEntry: PGtkWidget;
    FSearchButton: PGtkWidget;
    FDeletePermanentButton: PGtkWidget;
    
    // Actualizar perfil
    FProfileNameEntry: PGtkWidget;
    FProfileUserEntry: PGtkWidget;
    FProfilePhoneEntry: PGtkWidget;
    FUpdateProfileButton: PGtkWidget;
    
    // Reportes y otros
    FGenerateReportsButton: PGtkWidget;
    FLogoutButton: PGtkWidget;
    FStatusLabel: PGtkWidget;
    
    FEmailManager: TUserEmailManager;
    FLoginSession: TLoginSession;
    FReportGenerator: TReportGenerator;
    FOnLogout: TNotifyEvent;
    
    procedure CreateMainWindow;
    procedure CreateInboxTab;
    procedure CreateSendEmailTab;
    procedure CreateScheduleTab;
    procedure CreateContactsTab;
    procedure CreateTrashTab;
    procedure CreateProfileTab;
    
    procedure RefreshInbox;
    procedure RefreshScheduled;
    procedure RefreshTrash;
    procedure RefreshContactsInfo;
    procedure ShowEmailDetail(email: PEmail);
    
  public
    constructor Create(loginSession: TLoginSession; reportGenerator: TReportGenerator);
    destructor Destroy; override;
    
    procedure Show;
    procedure Hide;
    procedure ShowMessage(const msg: string);
    procedure Initialize;
    
    property OnLogout: TNotifyEvent read FOnLogout write FOnLogout;
  end;

// Callbacks
procedure OnInboxRowActivated(treeview: PGtkTreeView; path: PGtkTreePath; column: PGtkTreeViewColumn; data: gpointer); cdecl;
procedure OnSortInboxClick(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnSendEmailClick(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnScheduleEmailClick(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnProcessScheduledClick(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnAddContactClick(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnContactsNextClick(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnContactsPrevClick(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnSearchTrashClick(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnDeletePermanentClick(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnUpdateProfileClick(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnGenerateReportsClick(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnUserLogoutClick(widget: PGtkWidget; data: gpointer); cdecl;

implementation

uses
  DateUtils, StrUtils;

// TUserEmailManager Implementation
constructor TUserEmailManager.Create(userEmail: string);
begin
  inherited Create;
  FUserEmail := userEmail;
  FInbox := TEmailList.Create;
  FContacts := TContactList.Create;
  FTrash := TEmailStack.Create;
  FScheduledEmails := TEmailQueue.Create;
  FNextEmailId := 1;
  FNextContactId := 1;
  
  // Agregar datos de ejemplo
  AddSampleContacts;
  AddSampleEmails;
end;

destructor TUserEmailManager.Destroy;
begin
  FInbox.Free;
  FContacts.Free;
  FTrash.Free;
  FScheduledEmails.Free;
  inherited Destroy;
end;

procedure TUserEmailManager.AddSampleEmails;
begin
  FInbox.AddEmail(FNextEmailId, 'teacher@edd.com', FUserEmail, 'Bienvenido al sistema', 
                  'Este es un correo de bienvenida al sistema EDDMail.', Now - 1);
  Inc(FNextEmailId);
  
  FInbox.AddEmail(FNextEmailId, 'aux-luis@edd.com', FUserEmail, 'Información importante', 
                  'Recuerda revisar los reportes semanalmente.', Now - 0.5);
  Inc(FNextEmailId);
  
  FInbox.AddEmail(FNextEmailId, 'aux-marcosg@edd.com', FUserEmail, 'Reunión pendiente', 
                  'Tenemos una reunión programada para la próxima semana.', Now - 0.2);
  Inc(FNextEmailId);
end;

procedure TUserEmailManager.AddSampleContacts;
var
  errorMsg: string;
begin
  AddContact('Luis Garcia', 'auxluis', 'aux-luis@edd.com', '12345678', errorMsg);
  AddContact('Marcos Itzep', 'auxmarcos', 'aux-marcosg@edd.com', '87654321', errorMsg);
  AddContact('Steven Mejía', 'steven', 'steven@edd.com', '11111111', errorMsg);
  AddContact('Profesor EDD', 'teacher', 'teacher@edd.com', '4566-2535', errorMsg);
end;

function TUserEmailManager.SendEmail(destinatario, asunto, mensaje: string; out errorMsg: string): Boolean;
begin
  Result := False;
  errorMsg := '';
  
  if not IsContact(destinatario) then
  begin
    errorMsg := 'El destinatario no está en su lista de contactos';
    Exit;
  end;
  
  // En un sistema real, aquí se enviaría el correo al destinatario
  // Por ahora simulamos que se envía correctamente
  Result := True;
  Inc(FNextEmailId);
end;

function TUserEmailManager.ScheduleEmail(destinatario, asunto, mensaje: string; fecha: TDateTime; out errorMsg: string): Boolean;
begin
  Result := False;
  errorMsg := '';
  
  if not IsContact(destinatario) then
  begin
    errorMsg := 'El destinatario no está en su lista de contactos';
    Exit;
  end;
  
  if fecha <= Now then
  begin
    errorMsg := 'La fecha debe ser futura';
    Exit;
  end;
  
  FScheduledEmails.Enqueue(FNextEmailId, FUserEmail, destinatario, asunto, mensaje, fecha);
  Inc(FNextEmailId);
  Result := True;
end;

procedure TUserEmailManager.ProcessScheduledEmails;
var
  current: PEmail;
  emailToSend: PEmail;
  errorMsg: string;
begin
  current := FScheduledEmails.GetScheduledEmails;
  
  while current <> nil do
  begin
    if current^.fecha <= Now then
    begin
      emailToSend := FScheduledEmails.Dequeue;
      if emailToSend <> nil then
      begin
        // Simular envío del correo
        SendEmail(emailToSend^.destinatario, emailToSend^.asunto, emailToSend^.mensaje, errorMsg);
        Dispose(emailToSend);
      end;
    end;
    current := current^.siguiente;
  end;
end;

procedure TUserEmailManager.DeleteEmail(email: PEmail);
begin
  if email <> nil then
  begin
    FTrash.Push(email);
    FInbox.RemoveEmail(email);
    Dispose(email);
  end;
end;

function TUserEmailManager.RestoreFromTrash(emailId: Integer): Boolean;
var
  email: PEmail;
begin
  Result := False;
  
  // Buscar en la pila de papelera
  email := FTrash.Top;
  while email <> nil do
  begin
    if email^.id = emailId then
    begin
      FInbox.AddEmail(email^.id, email^.remitente, email^.destinatario, 
                     email^.asunto, email^.mensaje, email^.fecha, email^.programado);
      Result := True;
      Break;
    end;
    email := email^.siguiente;
  end;
end;

function TUserEmailManager.AddContact(nombre, usuario, email, telefono: string; out errorMsg: string): Boolean;
begin
  Result := False;
  errorMsg := '';
  
  if FContacts.FindContact(email) <> nil then
  begin
    errorMsg := 'El contacto ya existe';
    Exit;
  end;
  
  FContacts.AddContact(FNextContactId, nombre, usuario, email, telefono);
  Inc(FNextContactId);
  Result := True;
end;

function TUserEmailManager.IsContact(email: string): Boolean;
begin
  Result := FContacts.FindContact(email) <> nil;
end;

// TUserInterface Implementation
constructor TUserInterface.Create(loginSession: TLoginSession; reportGenerator: TReportGenerator);
var
  user: PUser;
begin
  inherited Create;
  FLoginSession := loginSession;
  FReportGenerator := reportGenerator;
  
  user := loginSession.GetCurrentUser;
  if user <> nil then
    FEmailManager := TUserEmailManager.Create(user^.email)
  else
    FEmailManager := TUserEmailManager.Create('');
    
  CreateMainWindow;
end;

destructor TUserInterface.Destroy;
begin
  FEmailManager.Free;
  inherited Destroy;
end;

procedure TUserInterface.CreateMainWindow;
var
  vbox: PGtkWidget;
  user: PUser;
  welcomeLabel: PGtkWidget;
begin
  // Crear ventana principal
  FMainWindow := gtk_window_new(GTK_WINDOW_TOPLEVEL);
  gtk_window_set_title(GTK_WINDOW(FMainWindow), 'EDDMail - Usuario');
  gtk_window_set_default_size(GTK_WINDOW(FMainWindow), 800, 600);
  gtk_window_set_position(GTK_WINDOW(FMainWindow), GTK_WIN_POS_CENTER);
  
  // Contenedor principal
  vbox := gtk_vbox_new(FALSE, 5);
  gtk_container_add(GTK_CONTAINER(FMainWindow), vbox);
  
  // Etiqueta de bienvenida
  user := FLoginSession.GetCurrentUser;
  if user <> nil then
  begin
    welcomeLabel := gtk_label_new(PChar('Hola: ' + user^.nombre));
    gtk_label_set_markup(GTK_LABEL(welcomeLabel), PChar('<span weight="bold">Hola: ' + user^.nombre + '</span>'));
  end
  else
    welcomeLabel := gtk_label_new('Hola: Usuario');
    
  gtk_misc_set_alignment(GTK_MISC(welcomeLabel), 0.0, 0.5);
  gtk_box_pack_start(GTK_BOX(vbox), welcomeLabel, FALSE, FALSE, 10);
  
  // Crear notebook para las pestañas
  FNotebook := gtk_notebook_new();
  gtk_box_pack_start(GTK_BOX(vbox), FNotebook, TRUE, TRUE, 0);
  
  // Crear todas las pestañas
  CreateInboxTab;
  CreateSendEmailTab;
  CreateScheduleTab;
  CreateContactsTab;
  CreateTrashTab;
  CreateProfileTab;
  
  // Botones inferiores
  var hbox := gtk_hbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(hbox), 10);
  gtk_box_pack_start(GTK_BOX(vbox), hbox, FALSE, FALSE, 0);
  
  FGenerateReportsButton := gtk_button_new_with_label('Generar Reportes');
  g_signal_connect(G_OBJECT(FGenerateReportsButton), 'clicked', G_CALLBACK(@OnGenerateReportsClick), Self);
  gtk_box_pack_start(GTK_BOX(hbox), FGenerateReportsButton, FALSE, FALSE, 0);
  
  FLogoutButton := gtk_button_new_with_label('Cerrar Sesión');
  g_signal_connect(G_OBJECT(FLogoutButton), 'clicked', G_CALLBACK(@OnUserLogoutClick), Self);
  gtk_box_pack_end(GTK_BOX(hbox), FLogoutButton, FALSE, FALSE, 0);
  
  // Label de estado
  FStatusLabel := gtk_label_new('');
  gtk_box_pack_start(GTK_BOX(vbox), FStatusLabel, FALSE, FALSE, 5);
  
  gtk_widget_show_all(FMainWindow);
end;

procedure TUserInterface.CreateInboxTab;
var
  vbox, hbox: PGtkWidget;
  scrolled: PGtkWidget;
  renderer: PGtkCellRenderer;
  column: PGtkTreeViewColumn;
begin
  vbox := gtk_vbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(vbox), 10);
  
  // Botones superiores
  hbox := gtk_hbox_new(FALSE, 10);
  gtk_box_pack_start(GTK_BOX(vbox), hbox, FALSE, FALSE, 0);
  
  FSortButton := gtk_button_new_with_label('Ordenar A-Z');
  g_signal_connect(G_OBJECT(FSortButton), 'clicked', G_CALLBACK(@OnSortInboxClick), Self);
  gtk_box_pack_start(GTK_BOX(hbox), FSortButton, FALSE, FALSE, 0);
  
  FUnreadLabel := gtk_label_new('No leídos: 0');
  gtk_box_pack_end(GTK_BOX(hbox), FUnreadLabel, FALSE, FALSE, 0);
  
  // TreeView para correos
  scrolled := gtk_scrolled_window_new(nil, nil);
  gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(scrolled), GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
  gtk_box_pack_start(GTK_BOX(vbox), scrolled, TRUE, TRUE, 0);
  
  FInboxStore := gtk_list_store_new(4, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_POINTER);
  FInboxTreeView := gtk_tree_view_new_with_model(GTK_TREE_MODEL(FInboxStore));
  gtk_container_add(GTK_CONTAINER(scrolled), FInboxTreeView);
  
  // Columnas
  renderer := gtk_cell_renderer_text_new();
  column := gtk_tree_view_column_new_with_attributes('Estado', renderer, 'text', 0, nil);
  gtk_tree_view_append_column(GTK_TREE_VIEW(FInboxTreeView), column);
  
  column := gtk_tree_view_column_new_with_attributes('Asunto', renderer, 'text', 1, nil);
  gtk_tree_view_append_column(GTK_TREE_VIEW(FInboxTreeView), column);
  
  column := gtk_tree_view_column_new_with_attributes('Remitente', renderer, 'text', 2, nil);
  gtk_tree_view_append_column(GTK_TREE_VIEW(FInboxTreeView), column);
  
  g_signal_connect(G_OBJECT(FInboxTreeView), 'row-activated', G_CALLBACK(@OnInboxRowActivated), Self);
  
  gtk_notebook_append_page(GTK_NOTEBOOK(FNotebook), vbox, gtk_label_new('Bandeja de Entrada'));
end;

procedure TUserInterface.CreateSendEmailTab;
var
  vbox: PGtkWidget;
  table: PGtkWidget;
  scrolled: PGtkWidget;
begin
  vbox := gtk_vbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(vbox), 10);
  
  // Tabla para campos
  table := gtk_table_new(3, 2, FALSE);
  gtk_table_set_row_spacings(GTK_TABLE(table), 5);
  gtk_table_set_col_spacings(GTK_TABLE(table), 5);
  gtk_box_pack_start(GTK_BOX(vbox), table, FALSE, FALSE, 0);
  
  // Destinatario
  gtk_table_attach_defaults(GTK_TABLE(table), gtk_label_new('Destinatario:'), 0, 1, 0, 1);
  FSendDestinationEntry := gtk_entry_new();
  gtk_table_attach_defaults(GTK_TABLE(table), FSendDestinationEntry, 1, 2, 0, 1);
  
  // Asunto
  gtk_table_attach_defaults(GTK_TABLE(table), gtk_label_new('Asunto:'), 0, 1, 1, 2);
  FSendSubjectEntry := gtk_entry_new();
  gtk_table_attach_defaults(GTK_TABLE(table), FSendSubjectEntry, 1, 2, 1, 2);
  
  // Mensaje
  gtk_table_attach_defaults(GTK_TABLE(table), gtk_label_new('Mensaje:'), 0, 1, 2, 3);
  scrolled := gtk_scrolled_window_new(nil, nil);
  gtk_widget_set_size_request(scrolled, -1, 200);
  FSendMessageText := gtk_text_view_new();
  gtk_container_add(GTK_CONTAINER(scrolled), FSendMessageText);
  gtk_table_attach_defaults(GTK_TABLE(table), scrolled, 1, 2, 2, 3);
  
  // Botón enviar
  FSendButton := gtk_button_new_with_label('Enviar');
  g_signal_connect(G_OBJECT(FSendButton), 'clicked', G_CALLBACK(@OnSendEmailClick), Self);
  gtk_box_pack_start(GTK_BOX(vbox), FSendButton, FALSE, FALSE, 10);
  
  gtk_notebook_append_page(GTK_NOTEBOOK(FNotebook), vbox, gtk_label_new('Enviar Correo'));
end;

procedure TUserInterface.CreateScheduleTab;
var
  vbox, hbox: PGtkWidget;
  table: PGtkWidget;
  scrolled: PGtkWidget;
  renderer: PGtkCellRenderer;
  column: PGtkTreeViewColumn;
begin
  vbox := gtk_vbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(vbox), 10);
  
  // Sección programar correo
  var frame := gtk_frame_new('Programar Correo');
  gtk_box_pack_start(GTK_BOX(vbox), frame, FALSE, FALSE, 0);
  
  var frameVbox := gtk_vbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(frameVbox), 10);
  gtk_container_add(GTK_CONTAINER(frame), frameVbox);
  
  table := gtk_table_new(4, 2, FALSE);
  gtk_table_set_row_spacings(GTK_TABLE(table), 5);
  gtk_table_set_col_spacings(GTK_TABLE(table), 5);
  gtk_box_pack_start(GTK_BOX(frameVbox), table, FALSE, FALSE, 0);
  
  // Campos
  gtk_table_attach_defaults(GTK_TABLE(table), gtk_label_new('Destinatario:'), 0, 1, 0, 1);
  FScheduleDestinationEntry := gtk_entry_new();
  gtk_table_attach_defaults(GTK_TABLE(table), FScheduleDestinationEntry, 1, 2, 0, 1);
  
  gtk_table_attach_defaults(GTK_TABLE(table), gtk_label_new('Asunto:'), 0, 1, 1, 2);
  FScheduleSubjectEntry := gtk_entry_new();
  gtk_table_attach_defaults(GTK_TABLE(table), FScheduleSubjectEntry, 1, 2, 1, 2);
  
  gtk_table_attach_defaults(GTK_TABLE(table), gtk_label_new('Fecha (DD/MM/YYYY HH:MM):'), 0, 1, 2, 3);
  FScheduleDateEntry := gtk_entry_new();
  gtk_entry_set_text(GTK_ENTRY(FScheduleDateEntry), PChar(FormatDateTime('dd/mm/yyyy hh:nn', Now + 1)));
  gtk_table_attach_defaults(GTK_TABLE(table), FScheduleDateEntry, 1, 2, 2, 3);
  
  gtk_table_attach_defaults(GTK_TABLE(table), gtk_label_new('Mensaje:'), 0, 1, 3, 4);
  scrolled := gtk_scrolled_window_new(nil, nil);
  gtk_widget_set_size_request(scrolled, -1, 100);
  FScheduleMessageText := gtk_text_view_new();
  gtk_container_add(GTK_CONTAINER(scrolled), FScheduleMessageText);
  gtk_table_attach_defaults(GTK_TABLE(table), scrolled, 1, 2, 3, 4);
  
  FScheduleButton := gtk_button_new_with_label('Programar');
  g_signal_connect(G_OBJECT(FScheduleButton), 'clicked', G_CALLBACK(@OnScheduleEmailClick), Self);
  gtk_box_pack_start(GTK_BOX(frameVbox), FScheduleButton, FALSE, FALSE, 0);
  
  // Sección correos programados
  frame := gtk_frame_new('Correos Programados');
  gtk_box_pack_start(GTK_BOX(vbox), frame, TRUE, TRUE, 0);
  
  frameVbox := gtk_vbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(frameVbox), 10);
  gtk_container_add(GTK_CONTAINER(frame), frameVbox);
  
  hbox := gtk_hbox_new(FALSE, 10);
  gtk_box_pack_start(GTK_BOX(frameVbox), hbox, FALSE, FALSE, 0);
  
  FProcessScheduledButton := gtk_button_new_with_label('Enviar');
  g_signal_connect(G_OBJECT(FProcessScheduledButton), 'clicked', G_CALLBACK(@OnProcessScheduledClick), Self);
  gtk_box_pack_start(GTK_BOX(hbox), FProcessScheduledButton, FALSE, FALSE, 0);
  
  scrolled := gtk_scrolled_window_new(nil, nil);
  gtk_box_pack_start(GTK_BOX(frameVbox), scrolled, TRUE, TRUE, 0);
  
  FScheduledStore := gtk_list_store_new(4, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_POINTER);
  FScheduledTreeView := gtk_tree_view_new_with_model(GTK_TREE_MODEL(FScheduledStore));
  gtk_container_add(GTK_CONTAINER(scrolled), FScheduledTreeView);
  
  renderer := gtk_cell_renderer_text_new();
  column := gtk_tree_view_column_new_with_attributes('Asunto', renderer, 'text', 0, nil);
  gtk_tree_view_append_column(GTK_TREE_VIEW(FScheduledTreeView), column);
  
  column := gtk_tree_view_column_new_with_attributes('Remitente', renderer, 'text', 1, nil);
  gtk_tree_view_append_column(GTK_TREE_VIEW(FScheduledTreeView), column);
  
  column := gtk_tree_view_column_new_with_attributes('Fecha de Envío', renderer, 'text', 2, nil);
  gtk_tree_view_append_column(GTK_TREE_VIEW(FScheduledTreeView), column);
  
  gtk_notebook_append_page(GTK_NOTEBOOK(FNotebook), vbox, gtk_label_new('Programar Correo'));
end;

procedure TUserInterface.CreateContactsTab;
var
  vbox, hbox: PGtkWidget;
  table: PGtkWidget;
  frame: PGtkWidget;
begin
  vbox := gtk_vbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(vbox), 10);
  
  // Sección agregar contacto
  frame := gtk_frame_new('Agregar Contacto');
  gtk_box_pack_start(GTK_BOX(vbox), frame, FALSE, FALSE, 0);
  
  var frameVbox := gtk_vbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(frameVbox), 10);
  gtk_container_add(GTK_CONTAINER(frame), frameVbox);
  
  table := gtk_table_new(2, 2, FALSE);
  gtk_table_set_row_spacings(GTK_TABLE(table), 5);
  gtk_table_set_col_spacings(GTK_TABLE(table), 5);
  gtk_box_pack_start(GTK_BOX(frameVbox), table, FALSE, FALSE, 0);
  
  gtk_table_attach_defaults(GTK_TABLE(table), gtk_label_new('Correo:'), 0, 1, 0, 1);
  FContactsEmailEntry := gtk_entry_new();
  gtk_table_attach_defaults(GTK_TABLE(table), FContactsEmailEntry, 1, 2, 0, 1);
  
  FAddContactButton := gtk_button_new_with_label('Agregar');
  g_signal_connect(G_OBJECT(FAddContactButton), 'clicked', G_CALLBACK(@OnAddContactClick), Self);
  gtk_box_pack_start(GTK_BOX(frameVbox), FAddContactButton, FALSE, FALSE, 0);
  
  // Sección navegar contactos
  frame := gtk_frame_new('Contactos');
  gtk_box_pack_start(GTK_BOX(vbox), frame, TRUE, TRUE, 0);
  
  frameVbox := gtk_vbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(frameVbox), 10);
  gtk_container_add(GTK_CONTAINER(frame), frameVbox);
  
  hbox := gtk_hbox_new(FALSE, 10);
  gtk_box_pack_start(GTK_BOX(frameVbox), hbox, FALSE, FALSE, 0);
  
  FContactsPrevButton := gtk_button_new_with_label('<');
  g_signal_connect(G_OBJECT(FContactsPrevButton), 'clicked', G_CALLBACK(@OnContactsPrevClick), Self);
  gtk_box_pack_start(GTK_BOX(hbox), FContactsPrevButton, FALSE, FALSE, 0);
  
  FContactsNextButton := gtk_button_new_with_label('>');
  g_signal_connect(G_OBJECT(FContactsNextButton), 'clicked', G_CALLBACK(@OnContactsNextClick), Self);
  gtk_box_pack_end(GTK_BOX(hbox), FContactsNextButton, FALSE, FALSE, 0);
  
  FContactsInfoLabel := gtk_label_new('No hay contactos');
  gtk_misc_set_alignment(GTK_MISC(FContactsInfoLabel), 0.5, 0.5);
  gtk_box_pack_start(GTK_BOX(frameVbox), FContactsInfoLabel, TRUE, TRUE, 0);
  
  gtk_notebook_append_page(GTK_NOTEBOOK(FNotebook), vbox, gtk_label_new('Contactos'));
end;

procedure TUserInterface.CreateTrashTab;
var
  vbox, hbox: PGtkWidget;
  scrolled: PGtkWidget;
  renderer: PGtkCellRenderer;
  column: PGtkTreeViewColumn;
begin
  vbox := gtk_vbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(vbox), 10);
  
  // Búsqueda
  hbox := gtk_hbox_new(FALSE, 10);
  gtk_box_pack_start(GTK_BOX(vbox), hbox, FALSE, FALSE, 0);
  
  gtk_box_pack_start(GTK_BOX(hbox), gtk_label_new('Buscar:'), FALSE, FALSE, 0);
  FSearchEntry := gtk_entry_new();
  gtk_box_pack_start(GTK_BOX(hbox), FSearchEntry, TRUE, TRUE, 0);
  
  FSearchButton := gtk_button_new_with_label('Buscar');
  g_signal_connect(G_OBJECT(FSearchButton), 'clicked', G_CALLBACK(@OnSearchTrashClick), Self);
  gtk_box_pack_start(GTK_BOX(hbox), FSearchButton, FALSE, FALSE, 0);
  
  FDeletePermanentButton := gtk_button_new_with_label('Eliminar');
  g_signal_connect(G_OBJECT(FDeletePermanentButton), 'clicked', G_CALLBACK(@OnDeletePermanentClick), Self);
  gtk_box_pack_start(GTK_BOX(hbox), FDeletePermanentButton, FALSE, FALSE, 0);
  
  // TreeView
  scrolled := gtk_scrolled_window_new(nil, nil);
  gtk_box_pack_start(GTK_BOX(vbox), scrolled, TRUE, TRUE, 0);
  
  FTrashStore := gtk_list_store_new(4, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_POINTER);
  FTrashTreeView := gtk_tree_view_new_with_model(GTK_TREE_MODEL(FTrashStore));
  gtk_container_add(GTK_CONTAINER(scrolled), FTrashTreeView);
  
  renderer := gtk_cell_renderer_text_new();
  column := gtk_tree_view_column_new_with_attributes('Asunto', renderer, 'text', 0, nil);
  gtk_tree_view_append_column(GTK_TREE_VIEW(FTrashTreeView), column);
  
  column := gtk_tree_view_column_new_with_attributes('Remitente', renderer, 'text', 1, nil);
  gtk_tree_view_append_column(GTK_TREE_VIEW(FTrashTreeView), column);
  
  column := gtk_tree_view_column_new_with_attributes('Mensaje', renderer, 'text', 2, nil);
  gtk_tree_view_append_column(GTK_TREE_VIEW(FTrashTreeView), column);
  
  gtk_notebook_append_page(GTK_NOTEBOOK(FNotebook), vbox, gtk_label_new('Papelera'));
end;

procedure TUserInterface.CreateProfileTab;
var
  vbox: PGtkWidget;
  table: PGtkWidget;
  user: PUser;
begin
  vbox := gtk_vbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(vbox), 10);
  
  var frame := gtk_frame_new('Actualizar Perfil');
  gtk_box_pack_start(GTK_BOX(vbox), frame, FALSE, FALSE, 0);
  
  var frameVbox := gtk_vbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(frameVbox), 10);
  gtk_container_add(GTK_CONTAINER(frame), frameVbox);
  
  table := gtk_table_new(4, 2, FALSE);
  gtk_table_set_row_spacings(GTK_TABLE(table), 5);
  gtk_table_set_col_spacings(GTK_TABLE(table), 5);
  gtk_box_pack_start(GTK_BOX(frameVbox), table, FALSE, FALSE, 0);
  
  user := FLoginSession.GetCurrentUser;
  
  gtk_table_attach_defaults(GTK_TABLE(table), gtk_label_new('Nombre:'), 0, 1, 0, 1);
  FProfileNameEntry := gtk_entry_new();
  if user <> nil then
    gtk_entry_set_text(GTK_ENTRY(FProfileNameEntry), PChar(user^.nombre));
  gtk_table_attach_defaults(GTK_TABLE(table), FProfileNameEntry, 1, 2, 0, 1);
  
  gtk_table_attach_defaults(GTK_TABLE(table), gtk_label_new('Usuario:'), 0, 1, 1, 2);
  FProfileUserEntry := gtk_entry_new();
  if user <> nil then
    gtk_entry_set_text(GTK_ENTRY(FProfileUserEntry), PChar(user^.usuario));
  gtk_table_attach_defaults(GTK_TABLE(table), FProfileUserEntry, 1, 2, 1, 2);
  
  gtk_table_attach_defaults(GTK_TABLE(table), gtk_label_new('Correo:'), 0, 1, 2, 3);
  var emailLabel := gtk_label_new('');
  if user <> nil then
    gtk_label_set_text(GTK_LABEL(emailLabel), PChar(user^.email));
  gtk_misc_set_alignment(GTK_MISC(emailLabel), 0.0, 0.5);
  gtk_table_attach_defaults(GTK_TABLE(table), emailLabel, 1, 2, 2, 3);
  
  gtk_table_attach_defaults(GTK_TABLE(table), gtk_label_new('Teléfono:'), 0, 1, 3, 4);
  FProfilePhoneEntry := gtk_entry_new();
  if user <> nil then
    gtk_entry_set_text(GTK_ENTRY(FProfilePhoneEntry), PChar(user^.telefono));
  gtk_table_attach_defaults(GTK_TABLE(table), FProfilePhoneEntry, 1, 2, 3, 4);
  
  FUpdateProfileButton := gtk_button_new_with_label('Actualizar');
  g_signal_connect(G_OBJECT(FUpdateProfileButton), 'clicked', G_CALLBACK(@OnUpdateProfileClick), Self);
  gtk_box_pack_start(GTK_BOX(frameVbox), FUpdateProfileButton, FALSE, FALSE, 10);
  
  gtk_notebook_append_page(GTK_NOTEBOOK(FNotebook), vbox, gtk_label_new('Actualizar Perfil'));
end;

procedure TUserInterface.RefreshInbox;
var
  current: PEmail;
  iter: TGtkTreeIter;
  unreadCount: Integer;
begin
  gtk_list_store_clear(FInboxStore);
  unreadCount := 0;
  
  current := FEmailManager.Inbox.Head;
  while current <> nil do
  begin
    gtk_list_store_append(FInboxStore, @iter);
    gtk_list_store_set(FInboxStore, @iter,
                       0, PChar(current^.estado),
                       1, PChar(current^.asunto),
                       2, PChar(current^.remitente),
                       3, current,
                       -1);
    
    if current^.estado = 'NL' then
      Inc(unreadCount);
      
    current := current^.siguiente;
  end;
  
  gtk_label_set_text(GTK_LABEL(FUnreadLabel), PChar('No leídos: ' + IntToStr(unreadCount)));
end;

procedure TUserInterface.RefreshScheduled;
var
  current: PEmail;
  iter: TGtkTreeIter;
begin
  gtk_list_store_clear(FScheduledStore);
  
  current := FEmailManager.ScheduledEmails.Head;
  while current <> nil do
  begin
    gtk_list_store_append(FScheduledStore, @iter);
    gtk_list_store_set(FScheduledStore, @iter,
                       0, PChar(current^.asunto),
                       1, PChar(current^.remitente),
                       2, PChar(DateTimeToStr(current^.fecha)),
                       3, current,
                       -1);
    current := current^.siguiente;
  end;
end;

procedure TUserInterface.RefreshTrash;
var
  current: PEmail;
  iter: TGtkTreeIter;
begin
  gtk_list_store_clear(FTrashStore);
  
  current := FEmailManager.Trash.Top;
  while current <> nil do
  begin
    gtk_list_store_append(FTrashStore, @iter);
    gtk_list_store_set(FTrashStore, @iter,
                       0, PChar(current^.asunto),
                       1, PChar(current^.remitente),
                       2, PChar(current^.mensaje),
                       3, current,
                       -1);
    current := current^.siguiente;
  end;
end;

procedure TUserInterface.RefreshContactsInfo;
var
  current: PContact;
  info: string;
begin
  current := FEmailManager.Contacts.Current;
  if current <> nil then
  begin
    info := 'Nombre: ' + current^.nombre + LineEnding +
            'Usuario: ' + current^.usuario + LineEnding +
            'Correo: ' + current^.email + LineEnding +
            'Teléfono: ' + current^.telefono;
  end
  else
    info := 'No hay contactos';
    
  gtk_label_set_text(GTK_LABEL(FContactsInfoLabel), PChar(info));
end;

procedure TUserInterface.ShowEmailDetail(email: PEmail);
var
  dialog: PGtkWidget;
  vbox: PGtkWidget;
  scrolled: PGtkWidget;
  textView: PGtkWidget;
  buffer: PGtkTextBuffer;
  info: string;
  response: gint;
begin
  if email = nil then Exit;
  
  dialog := gtk_dialog_new_with_buttons(
    'Detalle del Correo',
    GTK_WINDOW(FMainWindow),
    GTK_DIALOG_MODAL,
    GTK_STOCK_CLOSE, GTK_RESPONSE_CLOSE,
    'Eliminar', GTK_RESPONSE_YES,
    nil
  );
  
  gtk_window_set_default_size(GTK_WINDOW(dialog), 500, 400);
  
  vbox := gtk_dialog_get_content_area(GTK_DIALOG(dialog));
  
  info := 'Remitente: ' + email^.remitente + LineEnding +
          'Asunto: ' + email^.asunto + LineEnding +
          'Fecha: ' + DateTimeToStr(email^.fecha) + LineEnding +
          'Estado: ' + email^.estado + LineEnding + LineEnding +
          'Mensaje:';
          
  var infoLabel := gtk_label_new(PChar(info));
  gtk_misc_set_alignment(GTK_MISC(infoLabel), 0.0, 0.0);
  gtk_box_pack_start(GTK_BOX(vbox), infoLabel, FALSE, FALSE, 10);
  
  scrolled := gtk_scrolled_window_new(nil, nil);
  gtk_widget_set_size_request(scrolled, -1, 200);
  textView := gtk_text_view_new();
  gtk_text_view_set_editable(GTK_TEXT_VIEW(textView), FALSE);
  buffer := gtk_text_view_get_buffer(GTK_TEXT_VIEW(textView));
  gtk_text_buffer_set_text(buffer, PChar(email^.mensaje), -1);
  gtk_container_add(GTK_CONTAINER(scrolled), textView);
  gtk_box_pack_start(GTK_BOX(vbox), scrolled, TRUE, TRUE, 0);
  
  gtk_widget_show_all(dialog);
  
  // Marcar como leído
  FEmailManager.Inbox.MarkAsRead(email);
  RefreshInbox;
  
  response := gtk_dialog_run(GTK_DIALOG(dialog));
  if response = GTK_RESPONSE_YES then
  begin
    FEmailManager.DeleteEmail(email);
    RefreshInbox;
    RefreshTrash;
    ShowMessage('Correo eliminado');
  end;
  
  gtk_widget_destroy(dialog);
end;

procedure TUserInterface.Show;
begin
  if FMainWindow <> nil then
    gtk_widget_show(FMainWindow);
end;

procedure TUserInterface.Hide;
begin
  if FMainWindow <> nil then
    gtk_widget_hide(FMainWindow);
end;

procedure TUserInterface.ShowMessage(const msg: string);
begin
  if FStatusLabel <> nil then
    gtk_label_set_text(GTK_LABEL(FStatusLabel), PChar(msg));
end;

procedure TUserInterface.Initialize;
begin
  RefreshInbox;
  RefreshScheduled;
  RefreshTrash;
  RefreshContactsInfo;
end;

// Callbacks Implementation
procedure OnInboxRowActivated(treeview: PGtkTreeView; path: PGtkTreePath; column: PGtkTreeViewColumn; data: gpointer); cdecl;
var
  userInterface: TUserInterface;
  model: PGtkTreeModel;
  iter: TGtkTreeIter;
  email: PEmail;
begin
  userInterface := TUserInterface(data);
  model := gtk_tree_view_get_model(treeview);
  
  if gtk_tree_model_get_iter(model, @iter, path) then
  begin
    gtk_tree_model_get(model, @iter, 3, @email, -1);
    userInterface.ShowEmailDetail(email);
  end;
end;

procedure OnSortInboxClick(widget: PGtkWidget; data: gpointer); cdecl;
var
  userInterface: TUserInterface;
begin
  userInterface := TUserInterface(data);
  userInterface.FEmailManager.Inbox.SortBySubject;
  userInterface.RefreshInbox;
  userInterface.ShowMessage('Correos ordenados alfabéticamente');
end;

procedure OnSendEmailClick(widget: PGtkWidget; data: gpointer); cdecl;
var
  userInterface: TUserInterface;
  destinatario, asunto, mensaje, errorMsg: string;
  buffer: PGtkTextBuffer;
  startIter, endIter: TGtkTextIter;
begin
  userInterface := TUserInterface(data);
  
  destinatario := gtk_entry_get_text(GTK_ENTRY(userInterface.FSendDestinationEntry));
  asunto := gtk_entry_get_text(GTK_ENTRY(userInterface.FSendSubjectEntry));
  
  buffer := gtk_text_view_get_buffer(GTK_TEXT_VIEW(userInterface.FSendMessageText));
  gtk_text_buffer_get_start_iter(buffer, @startIter);
  gtk_text_buffer_get_end_iter(buffer, @endIter);
  mensaje := gtk_text_buffer_get_text(buffer, @startIter, @endIter, FALSE);
  
  if userInterface.FEmailManager.SendEmail(destinatario, asunto, mensaje, errorMsg) then
  begin
    gtk_entry_set_text(GTK_ENTRY(userInterface.FSendDestinationEntry), '');
    gtk_entry_set_text(GTK_ENTRY(userInterface.FSendSubjectEntry), '');
    gtk_text_buffer_set_text(buffer, '', 0);
    userInterface.ShowMessage('Correo enviado exitosamente');
  end
  else
  begin
    userInterface.ShowMessage('Error: ' + errorMsg);
  end;
end;

procedure OnScheduleEmailClick(widget: PGtkWidget; data: gpointer); cdecl;
var
  userInterface: TUserInterface;
  destinatario, asunto, mensaje, fechaStr, errorMsg: string;
  buffer: PGtkTextBuffer;
  startIter, endIter: TGtkTextIter;
  fecha: TDateTime;
begin
  userInterface := TUserInterface(data);
  
  destinatario := gtk_entry_get_text(GTK_ENTRY(userInterface.FScheduleDestinationEntry));
  asunto := gtk_entry_get_text(GTK_ENTRY(userInterface.FScheduleSubjectEntry));
  fechaStr := gtk_entry_get_text(GTK_ENTRY(userInterface.FScheduleDateEntry));
  
  buffer := gtk_text_view_get_buffer(GTK_TEXT_VIEW(userInterface.FScheduleMessageText));
  gtk_text_buffer_get_start_iter(buffer, @startIter);
  gtk_text_buffer_get_end_iter(buffer, @endIter);
  mensaje := gtk_text_buffer_get_text(buffer, @startIter, @endIter, FALSE);
  
  try
    fecha := StrToDateTime(fechaStr);
  except
    userInterface.ShowMessage('Formato de fecha inválido');
    Exit;
  end;
  
  if userInterface.FEmailManager.ScheduleEmail(destinatario, asunto, mensaje, fecha, errorMsg) then
  begin
    gtk_entry_set_text(GTK_ENTRY(userInterface.FScheduleDestinationEntry), '');
    gtk_entry_set_text(GTK_ENTRY(userInterface.FScheduleSubjectEntry), '');
    gtk_text_buffer_set_text(buffer, '', 0);
    gtk_entry_set_text(GTK_ENTRY(userInterface.FScheduleDateEntry), PChar(FormatDateTime('dd/mm/yyyy hh:nn', Now + 1)));
    userInterface.RefreshScheduled;
    userInterface.ShowMessage('Correo programado exitosamente');
  end
  else
  begin
    userInterface.ShowMessage('Error: ' + errorMsg);
  end;
end;

procedure OnProcessScheduledClick(widget: PGtkWidget; data: gpointer); cdecl;
var
  userInterface: TUserInterface;
begin
  userInterface := TUserInterface(data);
  userInterface.FEmailManager.ProcessScheduledEmails;
  userInterface.RefreshScheduled;
  userInterface.ShowMessage('Correos programados procesados');
end;

procedure OnAddContactClick(widget: PGtkWidget; data: gpointer); cdecl;
var
  userInterface: TUserInterface;
  email, errorMsg: string;
begin
  userInterface := TUserInterface(data);
  
  email := gtk_entry_get_text(GTK_ENTRY(userInterface.FContactsEmailEntry));
  
  if userInterface.FEmailManager.AddContact('Contacto', 'user', email, '', errorMsg) then
  begin
    gtk_entry_set_text(GTK_ENTRY(userInterface.FContactsEmailEntry), '');
    userInterface.RefreshContactsInfo;
    userInterface.ShowMessage('Contacto agregado exitosamente');
  end
  else
  begin
    userInterface.ShowMessage('Error: ' + errorMsg);
  end;
end;

procedure OnContactsNextClick(widget: PGtkWidget; data: gpointer); cdecl;
var
  userInterface: TUserInterface;
begin
  userInterface := TUserInterface(data);
  userInterface.FEmailManager.Contacts.GetNext;
  userInterface.RefreshContactsInfo;
end;

procedure OnContactsPrevClick(widget: PGtkWidget; data: gpointer); cdecl;
var
  userInterface: TUserInterface;
begin
  userInterface := TUserInterface(data);
  userInterface.FEmailManager.Contacts.GetPrevious;
  userInterface.RefreshContactsInfo;
end;

procedure OnSearchTrashClick(widget: PGtkWidget; data: gpointer); cdecl;
var
  userInterface: TUserInterface;
  keyword: string;
  foundEmail: PEmail;
  iter: TGtkTreeIter;
begin
  userInterface := TUserInterface(data);
  keyword := gtk_entry_get_text(GTK_ENTRY(userInterface.FSearchEntry));
  
  if keyword <> '' then
  begin
    foundEmail := userInterface.FEmailManager.Trash.SearchBySubject(keyword);
    if foundEmail <> nil then
    begin
      gtk_list_store_clear(userInterface.FTrashStore);
      gtk_list_store_append(userInterface.FTrashStore, @iter);
      gtk_list_store_set(userInterface.FTrashStore, @iter,
                         0, PChar(foundEmail^.asunto),
                         1, PChar(foundEmail^.remitente),
                         2, PChar(foundEmail^.mensaje),
                         3, foundEmail,
                         -1);
      userInterface.ShowMessage('Correo encontrado');
    end
    else
    begin
      userInterface.ShowMessage('No se encontró ningún correo');
    end;
  end
  else
  begin
    userInterface.RefreshTrash;
  end;
end;

procedure OnDeletePermanentClick(widget: PGtkWidget; data: gpointer); cdecl;
var
  userInterface: TUserInterface;
  email: PEmail;
begin
  userInterface := TUserInterface(data);
  email := userInterface.FEmailManager.Trash.Pop;
  if email <> nil then
  begin
    Dispose(email);
    userInterface.RefreshTrash;
    userInterface.ShowMessage('Correo eliminado permanentemente');
  end
  else
  begin
    userInterface.ShowMessage('No hay correos en la papelera');
  end;
end;

procedure OnUpdateProfileClick(widget: PGtkWidget; data: gpointer); cdecl;
var
  userInterface: TUserInterface;
  nombre, usuario, telefono: string;
  // Aquí necesitaríamos acceso al UserManager, lo simplificaremos
begin
  userInterface := TUserInterface(data);
  
  nombre := gtk_entry_get_text(GTK_ENTRY(userInterface.FProfileNameEntry));
  usuario := gtk_entry_get_text(GTK_ENTRY(userInterface.FProfileUserEntry));
  telefono := gtk_entry_get_text(GTK_ENTRY(userInterface.FProfilePhoneEntry));
  
  // En una implementación completa, aquí se actualizaría el perfil
  userInterface.ShowMessage('Perfil actualizado (funcionalidad pendiente)');
end;

procedure OnGenerateReportsClick(widget: PGtkWidget; data: gpointer); cdecl;
var
  userInterface: TUserInterface;
  user: PUser;
  outputDir: string;
begin
  userInterface := TUserInterface(data);
  user := userInterface.FLoginSession.GetCurrentUser;
  
  if user <> nil then
  begin
    outputDir := GetCurrentDir;
    
    // Generar todos los reportes del usuario
    userInterface.FReportGenerator.GenerateReceivedEmailsReport(userInterface.FEmailManager.Inbox, user^.email, outputDir);
    userInterface.FReportGenerator.GenerateTrashReport(userInterface.FEmailManager.Trash, user^.email, outputDir);
    userInterface.FReportGenerator.GenerateScheduledEmailsReport(userInterface.FEmailManager.ScheduledEmails, user^.email, outputDir);
    userInterface.FReportGenerator.GenerateContactsReport(userInterface.FEmailManager.Contacts, user^.email, outputDir);
    
    userInterface.ShowMessage('Reportes generados en carpeta del usuario');
  end;
end;

procedure OnUserLogoutClick(widget: PGtkWidget; data: gpointer); cdecl;
var
  userInterface: TUserInterface;
begin
  userInterface := TUserInterface(data);
  userInterface.FLoginSession.Logout;
  if Assigned(userInterface.OnLogout) then
    userInterface.OnLogout(userInterface);
end;

end.
