unit user_interface;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, gtk2, gdk2, glib2, UStructures, UUser;

type
  TUserInterface = class
  private
    FMainWindow: PGtkWidget;
    FNotebook: PGtkWidget;
    FStatusLabel: PGtkWidget;
    FUserManager: TUserManager;
    FCurrentUser: PUser;

    // Inbox components
    FInboxStore: PGtkListStore;
    FInboxTreeView: PGtkWidget;
    FSortButton: PGtkWidget;
    FUnreadLabel: PGtkWidget;

    // Compose components
    FComposeToEntry: PGtkWidget;
    FComposeSubjectEntry: PGtkWidget;
    FComposeMessageText: PGtkWidget;
    FSendButton: PGtkWidget;

    // Contacts components
    FContactsEmailEntry: PGtkWidget;
    FAddContactButton: PGtkWidget;
    FContactsPrevButton: PGtkWidget;
    FContactsNextButton: PGtkWidget;
    FContactsInfoLabel: PGtkWidget;

    // Trash components
    FTrashStore: PGtkListStore;
    FTrashTreeView: PGtkWidget;
    FSearchEntry: PGtkWidget;
    FSearchButton: PGtkWidget;
    FDeletePermanentButton: PGtkWidget;

    // Schedule components
    FScheduleDestinationEntry: PGtkWidget;
    FScheduleSubjectEntry: PGtkWidget;
    FScheduleDateEntry: PGtkWidget;
    FScheduleMessageText: PGtkWidget;
    FScheduleButton: PGtkWidget;
    FScheduledStore: PGtkListStore;
    FScheduledTreeView: PGtkWidget;
    FProcessScheduledButton: PGtkWidget;

    // Profile components
    FProfileNameEntry: PGtkWidget;
    FProfileUserEntry: PGtkWidget;
    FProfilePhoneEntry: PGtkWidget;
    FUpdateProfileButton: PGtkWidget;

    // General components
    FGenerateReportsButton: PGtkWidget;
    FLogoutButton: PGtkWidget;

    // Events
    OnLogout: TNotifyEvent;

  public
    constructor Create(UserManager: TUserManager);
    destructor Destroy; override;

    procedure Initialize;
    procedure Show;
    procedure Hide;
    procedure SetCurrentUser(User: PUser);
    procedure CreateMainWindow;
    procedure CreateInboxTab;
    procedure CreateComposeTab;
    procedure CreateContactsTab;
    procedure CreateTrashTab;
    procedure CreateScheduleTab;
    procedure CreateProfileTab;
    procedure UpdateInbox;
    procedure UpdateContacts;
    procedure UpdateTrash;
    procedure UpdateScheduled;
    procedure ShowMessage(const msg: string);

    property CurrentUser: PUser read FCurrentUser;
  end;

// Callback procedures
procedure OnSortInboxClick(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnSendEmailClick(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnAddContactClick(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnContactsPrevClick(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnContactsNextClick(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnSearchTrashClick(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnDeletePermanentClick(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnScheduleEmailClick(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnProcessScheduledClick(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnUpdateProfileClick(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnGenerateReportsClick(widget: PGtkWidget; data: gpointer); cdecl;
procedure OnUserLogoutClick(widget: PGtkWidget; data: gpointer); cdecl;

implementation

constructor TUserInterface.Create(UserManager: TUserManager);
begin
  inherited Create;
  FUserManager := UserManager;
  FMainWindow := nil;
  FCurrentUser := nil;
  OnLogout := nil;
end;

destructor TUserInterface.Destroy;
begin
  if FMainWindow <> nil then
    gtk_widget_destroy(FMainWindow);
  inherited Destroy;
end;

procedure TUserInterface.Initialize;
begin
  if FMainWindow = nil then
    CreateMainWindow;
  UpdateInbox;
  UpdateContacts;
  UpdateTrash;
  UpdateScheduled;
end;

procedure TUserInterface.SetCurrentUser(User: PUser);
begin
  FCurrentUser := User;
end;

procedure TUserInterface.CreateMainWindow;
var
  vbox, hbox: PGtkWidget;
begin
  if FMainWindow <> nil then Exit;

  // Crear ventana principal
  FMainWindow := gtk_window_new(GTK_WINDOW_TOPLEVEL);
  gtk_window_set_title(GTK_WINDOW(FMainWindow), 'EDDMail - Sistema de Correo');
  gtk_window_set_default_size(GTK_WINDOW(FMainWindow), 800, 600);
  gtk_window_set_position(GTK_WINDOW(FMainWindow), GTK_WIN_POS_CENTER);

  // Contenedor principal
  vbox := gtk_vbox_new(FALSE, 0);
  gtk_container_add(GTK_CONTAINER(FMainWindow), vbox);

  // Crear notebook con tabs
  FNotebook := gtk_notebook_new();
  gtk_box_pack_start(GTK_BOX(vbox), FNotebook, TRUE, TRUE, 0);

  // Crear todas las pestañas
  CreateInboxTab;
  CreateComposeTab;
  CreateContactsTab;
  CreateTrashTab;
  CreateScheduleTab;
  CreateProfileTab;

  // Barra inferior con botones
  hbox := gtk_hbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(hbox), 10);
  gtk_box_pack_start(GTK_BOX(vbox), hbox, FALSE, FALSE, 0);

  FGenerateReportsButton := gtk_button_new_with_label('Generar Reportes');
  g_signal_connect(G_OBJECT(FGenerateReportsButton), 'clicked', G_CALLBACK(@OnGenerateReportsClick), Self);
  gtk_box_pack_start(GTK_BOX(hbox), FGenerateReportsButton, FALSE, FALSE, 0);

  FLogoutButton := gtk_button_new_with_label('Cerrar Sesión');
  g_signal_connect(G_OBJECT(FLogoutButton), 'clicked', G_CALLBACK(@OnUserLogoutClick), Self);
  gtk_box_pack_end(GTK_BOX(hbox), FLogoutButton, FALSE, FALSE, 0);

  // Label de estado
  FStatusLabel := gtk_label_new('');
  gtk_box_pack_start(GTK_BOX(vbox), FStatusLabel, FALSE, FALSE, 5);

  gtk_widget_show_all(FMainWindow);
end;

procedure TUserInterface.CreateInboxTab;
var
  vbox, hbox: PGtkWidget;
  scrolled: PGtkWidget;
  renderer: PGtkCellRenderer;
  column: PGtkTreeViewColumn;
begin
  vbox := gtk_vbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(vbox), 10);

  // Botones superiores
  hbox := gtk_hbox_new(FALSE, 10);
  gtk_box_pack_start(GTK_BOX(vbox), hbox, FALSE, FALSE, 0);

  FSortButton := gtk_button_new_with_label('Ordenar A-Z');
  g_signal_connect(G_OBJECT(FSortButton), 'clicked', G_CALLBACK(@OnSortInboxClick), Self);
  gtk_box_pack_start(GTK_BOX(hbox), FSortButton, FALSE, FALSE, 0);

  FUnreadLabel := gtk_label_new('No leídos: 0');
  gtk_box_pack_end(GTK_BOX(hbox), FUnreadLabel, FALSE, FALSE, 0);

  // TreeView para correos
  scrolled := gtk_scrolled_window_new(nil, nil);
  gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(scrolled), GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
  gtk_box_pack_start(GTK_BOX(vbox), scrolled, TRUE, TRUE, 0);

  FInboxStore := gtk_list_store_new(4, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_POINTER);
  FInboxTreeView := gtk_tree_view_new_with_model(GTK_TREE_MODEL(FInboxStore));
  gtk_container_add(GTK_CONTAINER(scrolled), FInboxTreeView);

  // Columnas
  renderer := gtk_cell_renderer_text_new();
  column := gtk_tree_view_column_new_with_attributes('Estado', renderer, 'text', 0, nil);
  gtk_tree_view_append_column(GTK_TREE_VIEW(FInboxTreeView), column);

  column := gtk_tree_view_column_new_with_attributes('Asunto', renderer, 'text', 1, nil);
  gtk_tree_view_append_column(GTK_TREE_VIEW(FInboxTreeView), column);

  column := gtk_tree_view_column_new_with_attributes('Remitente', renderer, 'text', 2, nil);
  gtk_tree_view_append_column(GTK_TREE_VIEW(FInboxTreeView), column);

  gtk_notebook_append_page(GTK_NOTEBOOK(FNotebook), vbox, gtk_label_new('Bandeja de Entrada'));
end;

procedure TUserInterface.CreateComposeTab;
var
  vbox, hbox: PGtkWidget;
  table: PGtkWidget;
  scrolled: PGtkWidget;
begin
  vbox := gtk_vbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(vbox), 10);

  // Formulario de composición
  table := gtk_table_new(3, 2, FALSE);
  gtk_table_set_row_spacings(GTK_TABLE(table), 5);
  gtk_table_set_col_spacings(GTK_TABLE(table), 5);
  gtk_box_pack_start(GTK_BOX(vbox), table, FALSE, FALSE, 0);

  // Campos del formulario
  gtk_table_attach_defaults(GTK_TABLE(table), gtk_label_new('Para:'), 0, 1, 0, 1);
  FComposeToEntry := gtk_entry_new();
  gtk_table_attach_defaults(GTK_TABLE(table), FComposeToEntry, 1, 2, 0, 1);

  gtk_table_attach_defaults(GTK_TABLE(table), gtk_label_new('Asunto:'), 0, 1, 1, 2);
  FComposeSubjectEntry := gtk_entry_new();
  gtk_table_attach_defaults(GTK_TABLE(table), FComposeSubjectEntry, 1, 2, 1, 2);

  gtk_table_attach_defaults(GTK_TABLE(table), gtk_label_new('Mensaje:'), 0, 1, 2, 3);
  scrolled := gtk_scrolled_window_new(nil, nil);
  gtk_widget_set_size_request(scrolled, -1, 200);
  FComposeMessageText := gtk_text_view_new();
  gtk_container_add(GTK_CONTAINER(scrolled), FComposeMessageText);
  gtk_table_attach_defaults(GTK_TABLE(table), scrolled, 1, 2, 2, 3);

  // Botón enviar
  hbox := gtk_hbox_new(FALSE, 10);
  gtk_box_pack_start(GTK_BOX(vbox), hbox, FALSE, FALSE, 0);

  FSendButton := gtk_button_new_with_label('Enviar');
  g_signal_connect(G_OBJECT(FSendButton), 'clicked', G_CALLBACK(@OnSendEmailClick), Self);
  gtk_box_pack_start(GTK_BOX(hbox), FSendButton, FALSE, FALSE, 0);

  gtk_notebook_append_page(GTK_NOTEBOOK(FNotebook), vbox, gtk_label_new('Enviar Correo'));
end;

procedure TUserInterface.CreateContactsTab;
var
  vbox, hbox: PGtkWidget;
  table: PGtkWidget;
  frame: PGtkWidget;
  frameVbox: PGtkWidget;  // VARIABLE AGREGADA
begin
  vbox := gtk_vbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(vbox), 10);

  // Sección agregar contacto
  frame := gtk_frame_new('Agregar Contacto');
  gtk_box_pack_start(GTK_BOX(vbox), frame, FALSE, FALSE, 0);

  frameVbox := gtk_vbox_new(FALSE, 10);  // USAR LA VARIABLE DECLARADA
  gtk_container_set_border_width(GTK_CONTAINER(frameVbox), 10);
  gtk_container_add(GTK_CONTAINER(frame), frameVbox);

  table := gtk_table_new(2, 2, FALSE);
  gtk_table_set_row_spacings(GTK_TABLE(table), 5);
  gtk_table_set_col_spacings(GTK_TABLE(table), 5);
  gtk_box_pack_start(GTK_BOX(frameVbox), table, FALSE, FALSE, 0);

  gtk_table_attach_defaults(GTK_TABLE(table), gtk_label_new('Correo:'), 0, 1, 0, 1);
  FContactsEmailEntry := gtk_entry_new();
  gtk_table_attach_defaults(GTK_TABLE(table), FContactsEmailEntry, 1, 2, 0, 1);

  FAddContactButton := gtk_button_new_with_label('Agregar');
  g_signal_connect(G_OBJECT(FAddContactButton), 'clicked', G_CALLBACK(@OnAddContactClick), Self);
  gtk_box_pack_start(GTK_BOX(frameVbox), FAddContactButton, FALSE, FALSE, 0);

  // Sección navegar contactos
  frame := gtk_frame_new('Contactos');
  gtk_box_pack_start(GTK_BOX(vbox), frame, TRUE, TRUE, 0);

  frameVbox := gtk_vbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(frameVbox), 10);
  gtk_container_add(GTK_CONTAINER(frame), frameVbox);

  hbox := gtk_hbox_new(FALSE, 10);
  gtk_box_pack_start(GTK_BOX(frameVbox), hbox, FALSE, FALSE, 0);

  FContactsPrevButton := gtk_button_new_with_label('<');
  g_signal_connect(G_OBJECT(FContactsPrevButton), 'clicked', G_CALLBACK(@OnContactsPrevClick), Self);
  gtk_box_pack_start(GTK_BOX(hbox), FContactsPrevButton, FALSE, FALSE, 0);

  FContactsNextButton := gtk_button_new_with_label('>');
  g_signal_connect(G_OBJECT(FContactsNextButton), 'clicked', G_CALLBACK(@OnContactsNextClick), Self);
  gtk_box_pack_end(GTK_BOX(hbox), FContactsNextButton, FALSE, FALSE, 0);

  FContactsInfoLabel := gtk_label_new('No hay contactos');
  gtk_misc_set_alignment(GTK_MISC(FContactsInfoLabel), 0.5, 0.5);
  gtk_box_pack_start(GTK_BOX(frameVbox), FContactsInfoLabel, TRUE, TRUE, 0);

  gtk_notebook_append_page(GTK_NOTEBOOK(FNotebook), vbox, gtk_label_new('Contactos'));
end;

procedure TUserInterface.CreateTrashTab;
var
  vbox, hbox: PGtkWidget;
  scrolled: PGtkWidget;
  renderer: PGtkCellRenderer;
  column: PGtkTreeViewColumn;
begin
  vbox := gtk_vbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(vbox), 10);

  // Búsqueda
  hbox := gtk_hbox_new(FALSE, 10);
  gtk_box_pack_start(GTK_BOX(vbox), hbox, FALSE, FALSE, 0);

  gtk_box_pack_start(GTK_BOX(hbox), gtk_label_new('Buscar:'), FALSE, FALSE, 0);
  FSearchEntry := gtk_entry_new();
  gtk_box_pack_start(GTK_BOX(hbox), FSearchEntry, TRUE, TRUE, 0);

  FSearchButton := gtk_button_new_with_label('Buscar');
  g_signal_connect(G_OBJECT(FSearchButton), 'clicked', G_CALLBACK(@OnSearchTrashClick), Self);
  gtk_box_pack_start(GTK_BOX(hbox), FSearchButton, FALSE, FALSE, 0);

  FDeletePermanentButton := gtk_button_new_with_label('Eliminar');
  g_signal_connect(G_OBJECT(FDeletePermanentButton), 'clicked', G_CALLBACK(@OnDeletePermanentClick), Self);
  gtk_box_pack_start(GTK_BOX(hbox), FDeletePermanentButton, FALSE, FALSE, 0);

  // TreeView
  scrolled := gtk_scrolled_window_new(nil, nil);
  gtk_box_pack_start(GTK_BOX(vbox), scrolled, TRUE, TRUE, 0);

  FTrashStore := gtk_list_store_new(4, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_POINTER);
  FTrashTreeView := gtk_tree_view_new_with_model(GTK_TREE_MODEL(FTrashStore));
  gtk_container_add(GTK_CONTAINER(scrolled), FTrashTreeView);

  renderer := gtk_cell_renderer_text_new();
  column := gtk_tree_view_column_new_with_attributes('Asunto', renderer, 'text', 0, nil);
  gtk_tree_view_append_column(GTK_TREE_VIEW(FTrashTreeView), column);

  column := gtk_tree_view_column_new_with_attributes('Remitente', renderer, 'text', 1, nil);
  gtk_tree_view_append_column(GTK_TREE_VIEW(FTrashTreeView), column);

  column := gtk_tree_view_column_new_with_attributes('Mensaje', renderer, 'text', 2, nil);
  gtk_tree_view_append_column(GTK_TREE_VIEW(FTrashTreeView), column);

  gtk_notebook_append_page(GTK_NOTEBOOK(FNotebook), vbox, gtk_label_new('Papelera'));
end;

procedure TUserInterface.CreateScheduleTab;
var
  vbox, hbox: PGtkWidget;
  table: PGtkWidget;
  frame: PGtkWidget;
  frameVbox: PGtkWidget;  // VARIABLE AGREGADA
  scrolled: PGtkWidget;
  renderer: PGtkCellRenderer;
  column: PGtkTreeViewColumn;
begin
  vbox := gtk_vbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(vbox), 10);

  // Sección programar correo
  frame := gtk_frame_new('Programar Correo');
  gtk_box_pack_start(GTK_BOX(vbox), frame, FALSE, FALSE, 0);

  frameVbox := gtk_vbox_new(FALSE, 10);  // USAR LA VARIABLE DECLARADA
  gtk_container_set_border_width(GTK_CONTAINER(frameVbox), 10);
  gtk_container_add(GTK_CONTAINER(frame), frameVbox);

  table := gtk_table_new(4, 2, FALSE);
  gtk_table_set_row_spacings(GTK_TABLE(table), 5);
  gtk_table_set_col_spacings(GTK_TABLE(table), 5);
  gtk_box_pack_start(GTK_BOX(frameVbox), table, FALSE, FALSE, 0);

  // Campos
  gtk_table_attach_defaults(GTK_TABLE(table), gtk_label_new('Destinatario:'), 0, 1, 0, 1);
  FScheduleDestinationEntry := gtk_entry_new();
  gtk_table_attach_defaults(GTK_TABLE(table), FScheduleDestinationEntry, 1, 2, 0, 1);

  gtk_table_attach_defaults(GTK_TABLE(table), gtk_label_new('Asunto:'), 0, 1, 1, 2);
  FScheduleSubjectEntry := gtk_entry_new();
  gtk_table_attach_defaults(GTK_TABLE(table), FScheduleSubjectEntry, 1, 2, 1, 2);

  gtk_table_attach_defaults(GTK_TABLE(table), gtk_label_new('Fecha (DD/MM/YYYY HH:MM):'), 0, 1, 2, 3);
  FScheduleDateEntry := gtk_entry_new();
  gtk_entry_set_text(GTK_ENTRY(FScheduleDateEntry), PChar(FormatDateTime('dd/mm/yyyy hh:nn', Now + 1)));
  gtk_table_attach_defaults(GTK_TABLE(table), FScheduleDateEntry, 1, 2, 2, 3);

  gtk_table_attach_defaults(GTK_TABLE(table), gtk_label_new('Mensaje:'), 0, 1, 3, 4);
  scrolled := gtk_scrolled_window_new(nil, nil);
  gtk_widget_set_size_request(scrolled, -1, 100);
  FScheduleMessageText := gtk_text_view_new();
  gtk_container_add(GTK_CONTAINER(scrolled), FScheduleMessageText);
  gtk_table_attach_defaults(GTK_TABLE(table), scrolled, 1, 2, 3, 4);

  FScheduleButton := gtk_button_new_with_label('Programar');
  g_signal_connect(G_OBJECT(FScheduleButton), 'clicked', G_CALLBACK(@OnScheduleEmailClick), Self);
  gtk_box_pack_start(GTK_BOX(frameVbox), FScheduleButton, FALSE, FALSE, 0);

  // Sección correos programados
  frame := gtk_frame_new('Correos Programados');
  gtk_box_pack_start(GTK_BOX(vbox), frame, TRUE, TRUE, 0);

  frameVbox := gtk_vbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(frameVbox), 10);
  gtk_container_add(GTK_CONTAINER(frame), frameVbox);

  hbox := gtk_hbox_new(FALSE, 10);
  gtk_box_pack_start(GTK_BOX(frameVbox), hbox, FALSE, FALSE, 0);

  FProcessScheduledButton := gtk_button_new_with_label('Enviar');
  g_signal_connect(G_OBJECT(FProcessScheduledButton), 'clicked', G_CALLBACK(@OnProcessScheduledClick), Self);
  gtk_box_pack_start(GTK_BOX(hbox), FProcessScheduledButton, FALSE, FALSE, 0);

  scrolled := gtk_scrolled_window_new(nil, nil);
  gtk_box_pack_start(GTK_BOX(frameVbox), scrolled, TRUE, TRUE, 0);

  FScheduledStore := gtk_list_store_new(4, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_POINTER);
  FScheduledTreeView := gtk_tree_view_new_with_model(GTK_TREE_MODEL(FScheduledStore));
  gtk_container_add(GTK_CONTAINER(scrolled), FScheduledTreeView);

  renderer := gtk_cell_renderer_text_new();
  column := gtk_tree_view_column_new_with_attributes('Asunto', renderer, 'text', 0, nil);
  gtk_tree_view_append_column(GTK_TREE_VIEW(FScheduledTreeView), column);

  column := gtk_tree_view_column_new_with_attributes('Remitente', renderer, 'text', 1, nil);
  gtk_tree_view_append_column(GTK_TREE_VIEW(FScheduledTreeView), column);

  column := gtk_tree_view_column_new_with_attributes('Fecha de Envío', renderer, 'text', 2, nil);
  gtk_tree_view_append_column(GTK_TREE_VIEW(FScheduledTreeView), column);

  gtk_notebook_append_page(GTK_NOTEBOOK(FNotebook), vbox, gtk_label_new('Programar Correo'));
end;

procedure TUserInterface.CreateProfileTab;
var
  vbox: PGtkWidget;
  table: PGtkWidget;
  user: PUser;
  hbox: PGtkWidget;  // VARIABLE AGREGADA
begin
  vbox := gtk_vbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(vbox), 10);

  // Título
  gtk_box_pack_start(GTK_BOX(vbox), gtk_label_new('Actualizar Perfil'), FALSE, FALSE, 0);

  // Formulario
  table := gtk_table_new(3, 2, FALSE);
  gtk_table_set_row_spacings(GTK_TABLE(table), 5);
  gtk_table_set_col_spacings(GTK_TABLE(table), 5);
  gtk_box_pack_start(GTK_BOX(vbox), table, FALSE, FALSE, 0);

  // Campos
  gtk_table_attach_defaults(GTK_TABLE(table), gtk_label_new('Nombre:'), 0, 1, 0, 1);
  FProfileNameEntry := gtk_entry_new();
  gtk_table_attach_defaults(GTK_TABLE(table), FProfileNameEntry, 1, 2, 0, 1);

  gtk_table_attach_defaults(GTK_TABLE(table), gtk_label_new('Usuario:'), 0, 1, 1, 2);
  FProfileUserEntry := gtk_entry_new();
  gtk_table_attach_defaults(GTK_TABLE(table), FProfileUserEntry, 1, 2, 1, 2);

  gtk_table_attach_defaults(GTK_TABLE(table), gtk_label_new('Teléfono:'), 0, 1, 2, 3);
  FProfilePhoneEntry := gtk_entry_new();
  gtk_table_attach_defaults(GTK_TABLE(table), FProfilePhoneEntry, 1, 2, 2, 3);

  // Botón actualizar
  hbox := gtk_hbox_new(FALSE, 10);  // USAR LA VARIABLE DECLARADA
  gtk_box_pack_start(GTK_BOX(vbox), hbox, FALSE, FALSE, 0);

  FUpdateProfileButton := gtk_button_new_with_label('Actualizar');
  g_signal_connect(G_OBJECT(FUpdateProfileButton), 'clicked', G_CALLBACK(@OnUpdateProfileClick), Self);
  gtk_box_pack_start(GTK_BOX(hbox), FUpdateProfileButton, FALSE, FALSE, 0);

  // Cargar datos actuales si hay usuario
  if FCurrentUser <> nil then
  begin
    user := FCurrentUser;
    gtk_entry_set_text(GTK_ENTRY(FProfileNameEntry), PChar(user^.nombre));
    gtk_entry_set_text(GTK_ENTRY(FProfileUserEntry), PChar(user^.usuario));
    gtk_entry_set_text(GTK_ENTRY(FProfilePhoneEntry), PChar(user^.telefono));
  end;

  gtk_notebook_append_page(GTK_NOTEBOOK(FNotebook), vbox, gtk_label_new('Perfil'));
end;

procedure TUserInterface.Show;
begin
  if FMainWindow <> nil then
    gtk_widget_show(FMainWindow);
end;

procedure TUserInterface.Hide;
begin
  if FMainWindow <> nil then
    gtk_widget_hide(FMainWindow);
end;

procedure TUserInterface.ShowMessage(const msg: string);
begin
  if FStatusLabel <> nil then
    gtk_label_set_text(GTK_LABEL(FStatusLabel), PChar(msg));
end;

procedure TUserInterface.UpdateInbox;
begin
  // TODO: Implementar actualización de bandeja de entrada
end;

procedure TUserInterface.UpdateContacts;
begin
  // TODO: Implementar actualización de contactos
end;

procedure TUserInterface.UpdateTrash;
begin
  // TODO: Implementar actualización de papelera
end;

procedure TUserInterface.UpdateScheduled;
begin
  // TODO: Implementar actualización de correos programados
end;

// Implementación de callbacks
procedure OnSortInboxClick(widget: PGtkWidget; data: gpointer); cdecl;
var
  userInterface: TUserInterface;
begin
  userInterface := TUserInterface(data);
  userInterface.ShowMessage('Ordenando correos...');
  // TODO: Implementar ordenamiento
end;

procedure OnSendEmailClick(widget: PGtkWidget; data: gpointer); cdecl;
var
  userInterface: TUserInterface;
  destinatario, asunto, mensaje: string;
  buffer: PGtkTextBuffer;
  start_iter, end_iter: TGtkTextIter;
begin
  userInterface := TUserInterface(data);

  // Obtener datos del formulario
  destinatario := gtk_entry_get_text(GTK_ENTRY(userInterface.FComposeToEntry));
  asunto := gtk_entry_get_text(GTK_ENTRY(userInterface.FComposeSubjectEntry));

  buffer := gtk_text_view_get_buffer(GTK_TEXT_VIEW(userInterface.FComposeMessageText));
  gtk_text_buffer_get_start_iter(buffer, @start_iter);
  gtk_text_buffer_get_end_iter(buffer, @end_iter);
  mensaje := gtk_text_buffer_get_text(buffer, @start_iter, @end_iter, FALSE);

  if (destinatario <> '') and (asunto <> '') and (mensaje <> '') then
  begin
    userInterface.ShowMessage('Correo enviado a ' + destinatario);
    // Limpiar formulario
    gtk_entry_set_text(GTK_ENTRY(userInterface.FComposeToEntry), '');
    gtk_entry_set_text(GTK_ENTRY(userInterface.FComposeSubjectEntry), '');
    gtk_text_buffer_set_text(buffer, '', 0);
  end
  else
    userInterface.ShowMessage('Por favor complete todos los campos');
end;

procedure OnAddContactClick(widget: PGtkWidget; data: gpointer); cdecl;
var
  userInterface: TUserInterface;
  email: string;
begin
  userInterface := TUserInterface(data);
  email := gtk_entry_get_text(GTK_ENTRY(userInterface.FContactsEmailEntry));

  if email <> '' then
  begin
    userInterface.ShowMessage('Contacto agregado: ' + email);
    gtk_entry_set_text(GTK_ENTRY(userInterface.FContactsEmailEntry), '');
    userInterface.UpdateContacts;
  end
  else
    userInterface.ShowMessage('Ingrese un email válido');
end;

procedure OnContactsPrevClick(widget: PGtkWidget; data: gpointer); cdecl;
var
  userInterface: TUserInterface;
begin
  userInterface := TUserInterface(data);
  userInterface.ShowMessage('Contacto anterior');
  // TODO: Implementar navegación hacia atrás
end;

procedure OnContactsNextClick(widget: PGtkWidget; data: gpointer); cdecl;
var
  userInterface: TUserInterface;
begin
  userInterface := TUserInterface(data);
  userInterface.ShowMessage('Siguiente contacto');
  // TODO: Implementar navegación hacia adelante
end;

procedure OnSearchTrashClick(widget: PGtkWidget; data: gpointer); cdecl;
var
  userInterface: TUserInterface;
  searchTerm: string;
begin
  userInterface := TUserInterface(data);
  searchTerm := gtk_entry_get_text(GTK_ENTRY(userInterface.FSearchEntry));

  if searchTerm <> '' then
    userInterface.ShowMessage('Buscando: ' + searchTerm)
  else
    userInterface.ShowMessage('Ingrese un término de búsqueda');
end;

procedure OnDeletePermanentClick(widget: PGtkWidget; data: gpointer); cdecl;
var
  userInterface: TUserInterface;
begin
  userInterface := TUserInterface(data);
  userInterface.ShowMessage('Eliminando permanentemente...');
  // TODO: Implementar eliminación permanente
end;

procedure OnScheduleEmailClick(widget: PGtkWidget; data: gpointer); cdecl;
var
  userInterface: TUserInterface;
  destinatario, asunto, fecha, mensaje: string;
  buffer: PGtkTextBuffer;
  start_iter, end_iter: TGtkTextIter;
begin
  userInterface := TUserInterface(data);

  // Obtener datos del formulario
  destinatario := gtk_entry_get_text(GTK_ENTRY(userInterface.FScheduleDestinationEntry));
  asunto := gtk_entry_get_text(GTK_ENTRY(userInterface.FScheduleSubjectEntry));
  fecha := gtk_entry_get_text(GTK_ENTRY(userInterface.FScheduleDateEntry));

  buffer := gtk_text_view_get_buffer(GTK_TEXT_VIEW(userInterface.FScheduleMessageText));
  gtk_text_buffer_get_start_iter(buffer, @start_iter);
  gtk_text_buffer_get_end_iter(buffer, @end_iter);
  mensaje := gtk_text_buffer_get_text(buffer, @start_iter, @end_iter, FALSE);

  if (destinatario <> '') and (asunto <> '') and (fecha <> '') and (mensaje <> '') then
  begin
    userInterface.ShowMessage('Correo programado para ' + fecha);
    // Limpiar formulario
    gtk_entry_set_text(GTK_ENTRY(userInterface.FScheduleDestinationEntry), '');
    gtk_entry_set_text(GTK_ENTRY(userInterface.FScheduleSubjectEntry), '');
    gtk_entry_set_text(GTK_ENTRY(userInterface.FScheduleDateEntry), PChar(FormatDateTime('dd/mm/yyyy hh:nn', Now + 1)));
    gtk_text_buffer_set_text(buffer, '', 0);
    userInterface.UpdateScheduled;
  end
  else
    userInterface.ShowMessage('Por favor complete todos los campos');
end;

procedure OnProcessScheduledClick(widget: PGtkWidget; data: gpointer); cdecl;
var
  userInterface: TUserInterface;
begin
  userInterface := TUserInterface(data);
  userInterface.ShowMessage('Procesando correos programados...');
  // TODO: Implementar procesamiento de correos programados
end;

procedure OnUpdateProfileClick(widget: PGtkWidget; data: gpointer); cdecl;
var
  userInterface: TUserInterface;
  nombre, usuario, telefono: string;
begin
  userInterface := TUserInterface(data);

  nombre := gtk_entry_get_text(GTK_ENTRY(userInterface.FProfileNameEntry));
  usuario := gtk_entry_get_text(GTK_ENTRY(userInterface.FProfileUserEntry));
  telefono := gtk_entry_get_text(GTK_ENTRY(userInterface.FProfilePhoneEntry));

  if (nombre <> '') and (usuario <> '') then
  begin
    if userInterface.FUserManager.UpdateProfile(nombre, usuario, telefono) then
      userInterface.ShowMessage('Perfil actualizado correctamente')
    else
      userInterface.ShowMessage('Error al actualizar perfil');
  end
  else
    userInterface.ShowMessage('Complete los campos obligatorios');
end;

procedure OnGenerateReportsClick(widget: PGtkWidget; data: gpointer); cdecl;
var
  userInterface: TUserInterface;
begin
  userInterface := TUserInterface(data);
  userInterface.ShowMessage('Generando reportes...');
  // TODO: Implementar generación de reportes
end;

procedure OnUserLogoutClick(widget: PGtkWidget; data: gpointer); cdecl;
var
  userInterface: TUserInterface;
begin
  userInterface := TUserInterface(data);
  userInterface.FUserManager.LogoutUser;
  if Assigned(userInterface.OnLogout) then
    userInterface.OnLogout(userInterface);
end;

end.
