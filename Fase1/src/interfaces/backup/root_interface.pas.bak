unit root_interface;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, glib2, gtk2, UStructures, URoot, ULogin;

type
  TRootInterface = class
  private
    window: PGtkWidget;
    notebook: PGtkWidget;

    // Variables para carga masiva
    file_chooser_button: PGtkWidget;
    load_button: PGtkWidget;
    load_status_label: PGtkWidget;

    // Variables para reportes
    reports_info_label: PGtkWidget;

    // Variables para comunidades
    community_name_entry: PGtkWidget;
    community_id_entry: PGtkWidget;
    user_email_entry: PGtkWidget;
    communities_tree: PGtkWidget;

    // Variables para estadísticas
    stats_label: PGtkWidget;

    procedure CreateMainWindow;
    procedure CreateMassiveLoadTab;
    procedure CreateReportsTab;
    procedure CreateCommunitiesTab;
    procedure CreateStatsTab;

    // Callbacks
    procedure OnLoadMassive(widget: PGtkWidget; data: gpointer); cdecl;
    procedure OnGenerateUsersReport(widget: PGtkWidget; data: gpointer); cdecl;
    procedure OnGenerateRelationsReport(widget: PGtkWidget; data: gpointer); cdecl;
    procedure OnCreateCommunity(widget: PGtkWidget; data: gpointer); cdecl;
    procedure OnAddUserToCommunity(widget: PGtkWidget; data: gpointer); cdecl;
    procedure OnGenerateCommunitiesReport(widget: PGtkWidget; data: gpointer); cdecl;
    procedure OnRefreshStats(widget: PGtkWidget; data: gpointer); cdecl;

    // Métodos auxiliares
    procedure RefreshCommunities;
    procedure RefreshStats;
    procedure ShowMessage(const msg: String);

  public
    constructor Create;
    destructor Destroy; override;
    procedure Show;
    procedure Hide;
  end;

implementation

constructor TRootInterface.Create;
begin
  inherited Create;
  CreateMainWindow;
end;

destructor TRootInterface.Destroy;
begin
  if window <> nil then
    gtk_widget_destroy(window);
  inherited Destroy;
end;

procedure TRootInterface.CreateMainWindow;
var
  vbox: PGtkWidget;
  welcome_label: PGtkWidget;
begin
  // Crear ventana principal
  window := gtk_window_new(GTK_WINDOW_TOPLEVEL);
  gtk_window_set_title(GTK_WINDOW(window), 'EDDMail - Administrador Root');
  gtk_window_set_default_size(GTK_WINDOW(window), 700, 500);
  gtk_window_set_position(GTK_WINDOW(window), GTK_WIN_POS_CENTER);

  vbox := gtk_vbox_new(FALSE, 5);
  gtk_container_add(GTK_CONTAINER(window), vbox);

  // Etiqueta de bienvenida
  welcome_label := gtk_label_new('Panel de Administrador - Usuario Root');
  gtk_box_pack_start(GTK_BOX(vbox), welcome_label, FALSE, FALSE, 10);

  // Crear notebook (pestañas)
  notebook := gtk_notebook_new();
  gtk_box_pack_start(GTK_BOX(vbox), notebook, TRUE, TRUE, 0);

  // Crear todas las pestañas
  CreateMassiveLoadTab;
  CreateReportsTab;
  CreateCommunitiesTab;
  CreateStatsTab;

  g_signal_connect(G_OBJECT(window), 'destroy', G_CALLBACK(@gtk_main_quit), nil);
end;

procedure TRootInterface.CreateMassiveLoadTab;
var
  vbox: PGtkWidget;
  label: PGtkWidget;
  frame: PGtkWidget;
  frame_vbox: PGtkWidget;
  hbox: PGtkWidget;
  info_label: PGtkWidget;
  info_text: String;
begin
  vbox := gtk_vbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(vbox), 10);

  // Información sobre la carga masiva
  info_text := 'Cargar usuarios desde archivo JSON' + LineEnding +
               'El archivo debe tener el formato especificado en el proyecto.' + LineEnding +
               'Ejemplo: usuarios.json';
  info_label := gtk_label_new(PChar(info_text));
  gtk_label_set_justify(GTK_LABEL(info_label), GTK_JUSTIFY_LEFT);
  gtk_box_pack_start(GTK_BOX(vbox), info_label, FALSE, FALSE, 0);

  // Frame para la carga de archivos
  frame := gtk_frame_new('Seleccionar Archivo JSON');
  frame_vbox := gtk_vbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(frame_vbox), 10);

  // Selector de archivo
  hbox := gtk_hbox_new(FALSE, 10);
  file_chooser_button := gtk_file_chooser_button_new('Seleccionar archivo JSON', GTK_FILE_CHOOSER_ACTION_OPEN);
  load_button := gtk_button_new_with_label('Cargar Usuarios');

  gtk_box_pack_start(GTK_BOX(hbox), file_chooser_button, TRUE, TRUE, 0);
  gtk_box_pack_start(GTK_BOX(hbox), load_button, FALSE, FALSE, 0);
  gtk_box_pack_start(GTK_BOX(frame_vbox), hbox, FALSE, FALSE, 0);

  // Estado de la carga
  load_status_label := gtk_label_new('Ningún archivo cargado');
  gtk_box_pack_start(GTK_BOX(frame_vbox), load_status_label, FALSE, FALSE, 0);

  gtk_container_add(GTK_CONTAINER(frame), frame_vbox);
  gtk_box_pack_start(GTK_BOX(vbox), frame, FALSE, FALSE, 0);

  // Conectar señales
  g_signal_connect(G_OBJECT(load_button), 'clicked', G_CALLBACK(@OnLoadMassive), nil);

  label := gtk_label_new('Carga Masiva');
  gtk_notebook_append_page(GTK_NOTEBOOK(notebook), vbox, label);
end;

procedure TRootInterface.CreateReportsTab;
var
  vbox: PGtkWidget;
  label: PGtkWidget;
  frame1, frame2: PGtkWidget;
  vbox1, vbox2: PGtkWidget;
  users_button, relations_button: PGtkWidget;
  info_label: PGtkWidget;
  info_text: String;
begin
  vbox := gtk_vbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(vbox), 10);

  // Información sobre reportes
  info_text := 'Generar reportes del sistema en formato Graphviz (.dot y .png)' + LineEnding +
               'Los reportes se guardan en: reports/Root-Reportes/';
  info_label := gtk_label_new(PChar(info_text));
  gtk_label_set_justify(GTK_LABEL(info_label), GTK_JUSTIFY_LEFT);
  gtk_box_pack_start(GTK_BOX(vbox), info_label, FALSE, FALSE, 0);

  // Frame para reporte de usuarios
  frame1 := gtk_frame_new('Reporte de Usuarios');
  vbox1 := gtk_vbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(vbox1), 10);

  users_button := gtk_button_new_with_label('Generar Reporte de Usuarios');
  gtk_box_pack_start(GTK_BOX(vbox1), users_button, FALSE, FALSE, 0);

  gtk_container_add(GTK_CONTAINER(frame1), vbox1);
  gtk_box_pack_start(GTK_BOX(vbox), frame1, FALSE, FALSE, 0);

  // Frame para reporte de relaciones
  frame2 := gtk_frame_new('Reporte de Relaciones');
  vbox2 := gtk_vbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(vbox2), 10);

  relations_button := gtk_button_new_with_label('Generar Reporte de Relaciones');
  gtk_box_pack_start(GTK_BOX(vbox2), relations_button, FALSE, FALSE, 0);

  gtk_container_add(GTK_CONTAINER(frame2), vbox2);
  gtk_box_pack_start(GTK_BOX(vbox), frame2, FALSE, FALSE, 0);

  // Estado de reportes
  reports_info_label := gtk_label_new('Reportes no generados');
  gtk_box_pack_start(GTK_BOX(vbox), reports_info_label, TRUE, TRUE, 0);

  // Conectar señales
  g_signal_connect(G_OBJECT(users_button), 'clicked', G_CALLBACK(@OnGenerateUsersReport), nil);
  g_signal_connect(G_OBJECT(relations_button), 'clicked', G_CALLBACK(@OnGenerateRelationsReport), nil);

  label := gtk_label_new('Reportes del Sistema');
  gtk_notebook_append_page(GTK_NOTEBOOK(notebook), vbox, label);
end;

procedure TRootInterface.CreateCommunitiesTab;
var
  vbox, hbox1, hbox2: PGtkWidget;
  label: PGtkWidget;
  frame1, frame2: PGtkWidget;
  vbox1, vbox2: PGtkWidget;
  name_label, id_label, email_label: PGtkWidget;
  create_button, add_user_button, generate_report_button: PGtkWidget;
  scrolled: PGtkWidget;
  renderer: PGtkCellRenderer;
  column: PGtkTreeViewColumn;
begin
  vbox := gtk_vbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(vbox), 10);

  // Frame para crear comunidad
  frame1 := gtk_frame_new('Crear Nueva Comunidad');
  vbox1 := gtk_vbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(vbox1), 10);

  hbox1 := gtk_hbox_new(FALSE, 5);
  name_label := gtk_label_new('Nombre:');
  community_name_entry := gtk_entry_new();
  create_button := gtk_button_new_with_label('Crear');

  gtk_box_pack_start(GTK_BOX(hbox1), name_label, FALSE, FALSE, 0);
  gtk_box_pack_start(GTK_BOX(hbox1), community_name_entry, TRUE, TRUE, 0);
  gtk_box_pack_start(GTK_BOX(hbox1), create_button, FALSE, FALSE, 0);
  gtk_box_pack_start(GTK_BOX(vbox1), hbox1, FALSE, FALSE, 0);

  gtk_container_add(GTK_CONTAINER(frame1), vbox1);
  gtk_box_pack_start(GTK_BOX(vbox), frame1, FALSE, FALSE, 0);

  // Frame para agregar usuario a comunidad
  frame2 := gtk_frame_new('Agregar Usuario a Comunidad');
  vbox2 := gtk_vbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(vbox2), 10);

  hbox2 := gtk_hbox_new(FALSE, 5);
  id_label := gtk_label_new('ID Comunidad:');
  community_id_entry := gtk_entry_new();
  email_label := gtk_label_new('Email Usuario:');
  user_email_entry := gtk_entry_new();
  add_user_button := gtk_button_new_with_label('Agregar');

  gtk_box_pack_start(GTK_BOX(hbox2), id_label, FALSE, FALSE, 0);
  gtk_box_pack_start(GTK_BOX(hbox2), community_id_entry, FALSE, FALSE, 0);
  gtk_box_pack_start(GTK_BOX(hbox2), email_label, FALSE, FALSE, 0);
  gtk_box_pack_start(GTK_BOX(hbox2), user_email_entry, TRUE, TRUE, 0);
  gtk_box_pack_start(GTK_BOX(hbox2), add_user_button, FALSE, FALSE, 0);
  gtk_box_pack_start(GTK_BOX(vbox2), hbox2, FALSE, FALSE, 0);

  gtk_container_add(GTK_CONTAINER(frame2), vbox2);
  gtk_box_pack_start(GTK_BOX(vbox), frame2, FALSE, FALSE, 0);

  // Lista de comunidades
  communities_tree := gtk_tree_view_new();
  renderer := gtk_cell_renderer_text_new();

  column := gtk_tree_view_column_new_with_attributes('Nombre', renderer, 'text', 1, nil);
  gtk_tree_view_append_column(GTK_TREE_VIEW(communities_tree), column);

  column := gtk_tree_view_column_new_with_attributes('Miembros', renderer, 'text', 2, nil);
  gtk_tree_view_append_column(GTK_TREE_VIEW(communities_tree), column);

  scrolled := gtk_scrolled_window_new(nil, nil);
  gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(scrolled), GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
  gtk_container_add(GTK_CONTAINER(scrolled), communities_tree);
  gtk_box_pack_start(GTK_BOX(vbox), scrolled, TRUE, TRUE, 0);

  // Botón para generar reporte de comunidades
  generate_report_button := gtk_button_new_with_label('Generar Reporte de Comunidades');
  gtk_box_pack_start(GTK_BOX(vbox), generate_report_button, FALSE, FALSE, 0);

  // Conectar señales
  g_signal_connect(G_OBJECT(create_button), 'clicked', G_CALLBACK(@OnCreateCommunity), nil);
  g_signal_connect(G_OBJECT(add_user_button), 'clicked', G_CALLBACK(@OnAddUserToCommunity), nil);
  g_signal_connect(G_OBJECT(generate_report_button), 'clicked', G_CALLBACK(@OnGenerateCommunitiesReport), nil);

  label := gtk_label_new('Gestión de Comunidades');
  gtk_notebook_append_page(GTK_NOTEBOOK(notebook), vbox, label);

  RefreshCommunities;
end;

procedure TRootInterface.CreateStatsTab;
var
  vbox: PGtkWidget;
  label: PGtkWidget;
  refresh_button: PGtkWidget;
  scrolled: PGtkWidget;
begin
  vbox := gtk_vbox_new(FALSE, 10);
  gtk_container_set_border_width(GTK_CONTAINER(vbox), 10);

  // Botón para refrescar estadísticas
  refresh_button := gtk_button_new_with_label('Refrescar Estadísticas');
  gtk_box_pack_start(GTK_BOX(vbox), refresh_button, FALSE, FALSE, 0);

  // Área de estadísticas
  scrolled := gtk_scrolled_window_new(nil, nil);
  gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(scrolled), GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);

  stats_label := gtk_label_new('Cargando estadísticas...');
  gtk_label_set_justify(GTK_LABEL(stats_label), GTK_JUSTIFY_LEFT);
  gtk_label_set_line_wrap(GTK_LABEL(stats_label), TRUE);
  gtk_scrolled_window_add_with_viewport(GTK_SCROLLED_WINDOW(scrolled), stats_label);

  gtk_box_pack_start(GTK_BOX(vbox), scrolled, TRUE, TRUE, 0);

  g_signal_connect(G_OBJECT(refresh_button), 'clicked', G_CALLBACK(@OnRefreshStats), nil);

  label := gtk_label_new('Estadísticas del Sistema');
  gtk_notebook_append_page(GTK_NOTEBOOK(notebook), vbox, label);

  RefreshStats;
end;

// ============================================================================
// CALLBACKS
// ============================================================================

procedure TRootInterface.OnLoadMassive(widget: PGtkWidget; data: gpointer); cdecl;
var
  filename: String;
  success: Boolean;
begin
  filename := gtk_file_chooser_get_filename(GTK_FILE_CHOOSER(file_chooser_button));

  if filename = '' then
  begin
    ShowMessage('Por favor selecciona un archivo JSON');
    Exit;
  end;

  success := RootManager.LoadMassiveUsers(filename);

  if success then
  begin
    gtk_label_set_text(GTK_LABEL(load_status_label), 'Usuarios cargados exitosamente');
    RefreshStats;
    ShowMessage('Carga masiva completada exitosamente');
  end
  else
  begin
    gtk_label_set_text(GTK_LABEL(load_status_label), 'Error al cargar usuarios');
    ShowMessage('Error al cargar el archivo JSON');
  end;
end;

procedure TRootInterface.OnGenerateUsersReport(widget: PGtkWidget; data: gpointer); cdecl;
begin
  if RootManager.GenerateUsersReport then
  begin
    gtk_label_set_text(GTK_LABEL(reports_info_label), 'Reporte de usuarios generado exitosamente');
    ShowMessage('Reporte de usuarios generado en reports/Root-Reportes/');
  end
  else
    ShowMessage('Error al generar reporte de usuarios');
end;

procedure TRootInterface.OnGenerateRelationsReport(widget: PGtkWidget; data: gpointer); cdecl;
begin
  if RootManager.GenerateRelationsReport then
  begin
    gtk_label_set_text(GTK_LABEL(reports_info_label), 'Reporte de relaciones generado exitosamente');
    ShowMessage('Reporte de relaciones generado en reports/Root-Reportes/');
  end
  else
    ShowMessage('Error al generar reporte de relaciones');
end;

procedure TRootInterface.OnCreateCommunity(widget: PGtkWidget; data: gpointer); cdecl;
var
  community_name: String;
  community_id: Integer;
begin
  community_name := gtk_entry_get_text(GTK_ENTRY(community_name_entry));

  if community_name = '' then
  begin
    ShowMessage('Por favor ingresa el nombre de la comunidad');
    Exit;
  end;

  community_id := RootManager.CreateCommunity(community_name);
  if community_id > 0 then
  begin
    gtk_entry_set_text(GTK_ENTRY(community_name_entry), '');
    RefreshCommunities;
    ShowMessage('Comunidad "' + community_name + '" creada con ID: ' + IntToStr(community_id));
  end
  else
    ShowMessage('Error al crear la comunidad');
end;

procedure TRootInterface.OnAddUserToCommunity(widget: PGtkWidget; data: gpointer); cdecl;
var
  community_id_str, user_email: String;
  community_id: Integer;
begin
  community_id_str := gtk_entry_get_text(GTK_ENTRY(community_id_entry));
  user_email := gtk_entry_get_text(GTK_ENTRY(user_email_entry));

  if (community_id_str = '') or (user_email = '') then
  begin
    ShowMessage('Por favor completa todos los campos');
    Exit;
  end;

  try
    community_id := StrToInt(community_id_str);
  except
    ShowMessage('ID de comunidad debe ser un número');
    Exit;
  end;

  if RootManager.AddUserToCommunity(community_id, user_email) then
  begin
    gtk_entry_set_text(GTK_ENTRY(community_id_entry), '');
    gtk_entry_set_text(GTK_ENTRY(user_email_entry), '');
    RefreshCommunities;
    ShowMessage('Usuario agregado a la comunidad exitosamente');
  end
  else
    ShowMessage('Error al agregar usuario a la comunidad');
end;

procedure TRootInterface.OnGenerateCommunitiesReport(widget: PGtkWidget; data: gpointer); cdecl;
begin
  if RootManager.GenerateCommunitiesReport then
    ShowMessage('Reporte de comunidades generado en reports/Root-Reportes/')
  else
    ShowMessage('Error al generar reporte de comunidades');
end;

procedure TRootInterface.OnRefreshStats(widget: PGtkWidget; data: gpointer); cdecl;
begin
  RefreshStats;
end;

// ============================================================================
// MÉTODOS AUXILIARES
// ============================================================================

procedure TRootInterface.RefreshCommunities;
var
  currentCommunity: PCommunity;
  currentMember: PMember;
  model: PGtkListStore;
  iter: TGtkTreeIter;
  member_count: Integer;
  members_text: String;
begin
  model := gtk_list_store_new(3, G_TYPE_INT, G_TYPE_STRING, G_TYPE_STRING);

  currentCommunity := CommunityList.head;
  while currentCommunity <> nil do
  begin
    // Contar miembros
    member_count := 0;
    members_text := '';
    currentMember := currentCommunity^.members;
    while currentMember <> nil do
    begin
      Inc(member_count);
      if members_text <> '' then
        members_text := members_text + ', ';
      members_text := members_text + currentMember^.email;
      currentMember := currentMember^.next;
    end;

    if member_count = 0 then
      members_text := 'Sin miembros';

    gtk_list_store_append(model, @iter);
    gtk_list_store_set(model, @iter,
      0, currentCommunity^.id,
      1, PChar(currentCommunity^.nombre),
      2, PChar(IntToStr(member_count) + ' - ' + members_text),
      -1);

    currentCommunity := currentCommunity^.next;
  end;

  gtk_tree_view_set_model(GTK_TREE_VIEW(communities_tree), GTK_TREE_MODEL(model));
end;

procedure TRootInterface.RefreshStats;
var
  stats: String;
begin
  stats := RootManager.GetSystemStats;
  gtk_label_set_text(GTK_LABEL(stats_label), PChar(stats));
end;

procedure TRootInterface.ShowMessage(const msg: String);
var
  dialog: PGtkWidget;
begin
  dialog := gtk_message_dialog_new(
    GTK_WINDOW(window),
    GTK_DIALOG_MODAL,
    GTK_MESSAGE_INFO,
    GTK_BUTTONS_OK,
    PChar(msg)
  );

  gtk_dialog_run(GTK_DIALOG(dialog));
  gtk_widget_destroy(dialog);
end;

procedure TRootInterface.Show;
begin
  if window <> nil then
    gtk_widget_show_all(window);
end;

procedure TRootInterface.Hide;
begin
  if window <> nil then
    gtk_widget_hide(window);
end;

end.

