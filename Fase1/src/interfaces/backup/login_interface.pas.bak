unit login_interface;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, glib2, gtk2,
  ULogin, UStructures,
  user_interface, root_interface, community_interface;

type
  TLoginInterface = class
  private
    window: PGtkWidget;
    email_entry: PGtkWidget;
    password_entry: PGtkWidget;
    login_button: PGtkWidget;
    register_button: PGtkWidget;

    procedure CreateLoginWindow;
    procedure OnLoginClick(widget: PGtkWidget; data: gpointer); cdecl;
    procedure OnRegisterClick(widget: PGtkWidget; data: gpointer); cdecl;

  public
    constructor Create;
    destructor Destroy; override;
    procedure Show;
    procedure Hide;
  end;

implementation

constructor TLoginInterface.Create;
begin
  inherited Create;
  CreateLoginWindow;
end;

destructor TLoginInterface.Destroy;
begin
  if window <> nil then
    gtk_widget_destroy(window);
  inherited Destroy;
end;

procedure TLoginInterface.CreateLoginWindow;
var
  vbox: PGtkWidget;
  hbox_email, hbox_password, hbox_buttons: PGtkWidget;
  label_email, label_password: PGtkWidget;
begin
  // Crear ventana principal
  window := gtk_window_new(GTK_WINDOW_TOPLEVEL);
  gtk_window_set_title(GTK_WINDOW(window), 'EDDMail - Inicio de Sesión');
  gtk_window_set_default_size(GTK_WINDOW(window), 400, 300);
  gtk_window_set_position(GTK_WINDOW(window), GTK_WIN_POS_CENTER);

  // Container principal
  vbox := gtk_vbox_new(FALSE, 10);
  gtk_container_add(GTK_CONTAINER(window), vbox);
  gtk_container_set_border_width(GTK_CONTAINER(vbox), 20);

  // Campo Email
  hbox_email := gtk_hbox_new(FALSE, 10);
  label_email := gtk_label_new('Email:');
  gtk_widget_set_size_request(label_email, 100, -1);
  email_entry := gtk_entry_new();

  gtk_box_pack_start(GTK_BOX(hbox_email), label_email, FALSE, FALSE, 0);
  gtk_box_pack_start(GTK_BOX(hbox_email), email_entry, TRUE, TRUE, 0);
  gtk_box_pack_start(GTK_BOX(vbox), hbox_email, FALSE, FALSE, 0);

  // Campo Password
  hbox_password := gtk_hbox_new(FALSE, 10);
  label_password := gtk_label_new('Password:');
  gtk_widget_set_size_request(label_password, 100, -1);
  password_entry := gtk_entry_new();
  gtk_entry_set_visibility(GTK_ENTRY(password_entry), FALSE);

  gtk_box_pack_start(GTK_BOX(hbox_password), label_password, FALSE, FALSE, 0);
  gtk_box_pack_start(GTK_BOX(hbox_password), password_entry, TRUE, TRUE, 0);
  gtk_box_pack_start(GTK_BOX(vbox), hbox_password, FALSE, FALSE, 0);

  // Botones
  hbox_buttons := gtk_hbox_new(TRUE, 10);
  login_button := gtk_button_new_with_label('Iniciar Sesión');
  register_button := gtk_button_new_with_label('Crear Cuenta');

  gtk_box_pack_start(GTK_BOX(hbox_buttons), login_button, TRUE, TRUE, 0);
  gtk_box_pack_start(GTK_BOX(hbox_buttons), register_button, TRUE, TRUE, 0);
  gtk_box_pack_start(GTK_BOX(vbox), hbox_buttons, FALSE, FALSE, 0);

  // Conectar señales
  g_signal_connect(G_OBJECT(login_button), 'clicked',
    G_CALLBACK(@OnLoginClick), nil);
  g_signal_connect(G_OBJECT(register_button), 'clicked',
    G_CALLBACK(@OnRegisterClick), nil);
  g_signal_connect(G_OBJECT(window), 'destroy',
    G_CALLBACK(@gtk_main_quit), nil);
end;

procedure TLoginInterface.OnLoginClick(widget: PGtkWidget; data: gpointer); cdecl;
var
  email, password: String;
  user: PUser;
  result: TLoginResult;
begin
  email := gtk_entry_get_text(GTK_ENTRY(email_entry));
  password := gtk_entry_get_text(GTK_ENTRY(password_entry));

  result := LoginManager.Login(email, password, user);

  case result of
    lrSuccess:
    begin
      WriteLn('Login exitoso para: ', user^.email);
      // Aquí abrir la interfaz correspondiente (root o user)
      Hide;
    end;
    lrInvalidCredentials:
      WriteLn('Credenciales inválidas');
    lrUserNotFound:
      WriteLn('Usuario no encontrado');
    lrError:
      WriteLn('Error en el sistema');
  end;
end;

procedure TLoginInterface.OnRegisterClick(widget: PGtkWidget; data: gpointer); cdecl;
begin
  WriteLn('Abrir ventana de registro');
  // Implementar ventana de registro
end;

procedure TLoginInterface.Show;
begin
  if window <> nil then
  begin
    gtk_widget_show_all(window);
  end;
end;

procedure TLoginInterface.Hide;
begin
  if window <> nil then
    gtk_widget_hide(window);
end;

end.

